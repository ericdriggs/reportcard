/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Repo struct for Repo
type Repo struct {
	RepoId *int32 `json:"repoId,omitempty"`
	RepoName *string `json:"repoName,omitempty"`
	OrgFk *int32 `json:"orgFk,omitempty"`
}

// NewRepo instantiates a new Repo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepo() *Repo {
	this := Repo{}
	return &this
}

// NewRepoWithDefaults instantiates a new Repo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepoWithDefaults() *Repo {
	this := Repo{}
	return &this
}

// GetRepoId returns the RepoId field value if set, zero value otherwise.
func (o *Repo) GetRepoId() int32 {
	if o == nil || o.RepoId == nil {
		var ret int32
		return ret
	}
	return *o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoIdOk() (*int32, bool) {
	if o == nil || o.RepoId == nil {
		return nil, false
	}
	return o.RepoId, true
}

// HasRepoId returns a boolean if a field has been set.
func (o *Repo) HasRepoId() bool {
	if o != nil && o.RepoId != nil {
		return true
	}

	return false
}

// SetRepoId gets a reference to the given int32 and assigns it to the RepoId field.
func (o *Repo) SetRepoId(v int32) {
	o.RepoId = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *Repo) GetRepoName() string {
	if o == nil || o.RepoName == nil {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetRepoNameOk() (*string, bool) {
	if o == nil || o.RepoName == nil {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *Repo) HasRepoName() bool {
	if o != nil && o.RepoName != nil {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *Repo) SetRepoName(v string) {
	o.RepoName = &v
}

// GetOrgFk returns the OrgFk field value if set, zero value otherwise.
func (o *Repo) GetOrgFk() int32 {
	if o == nil || o.OrgFk == nil {
		var ret int32
		return ret
	}
	return *o.OrgFk
}

// GetOrgFkOk returns a tuple with the OrgFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repo) GetOrgFkOk() (*int32, bool) {
	if o == nil || o.OrgFk == nil {
		return nil, false
	}
	return o.OrgFk, true
}

// HasOrgFk returns a boolean if a field has been set.
func (o *Repo) HasOrgFk() bool {
	if o != nil && o.OrgFk != nil {
		return true
	}

	return false
}

// SetOrgFk gets a reference to the given int32 and assigns it to the OrgFk field.
func (o *Repo) SetOrgFk(v int32) {
	o.OrgFk = &v
}

func (o Repo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RepoId != nil {
		toSerialize["repoId"] = o.RepoId
	}
	if o.RepoName != nil {
		toSerialize["repoName"] = o.RepoName
	}
	if o.OrgFk != nil {
		toSerialize["orgFk"] = o.OrgFk
	}
	return json.Marshal(toSerialize)
}

type NullableRepo struct {
	value *Repo
	isSet bool
}

func (v NullableRepo) Get() *Repo {
	return v.value
}

func (v *NullableRepo) Set(val *Repo) {
	v.value = val
	v.isSet = true
}

func (v NullableRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepo(val *Repo) *NullableRepo {
	return &NullableRepo{value: val, isSet: true}
}

func (v NullableRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


