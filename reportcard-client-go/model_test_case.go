/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestCase struct for TestCase
type TestCase struct {
	TestCaseId *int64 `json:"testCaseId,omitempty"`
	TestSuiteFk *int64 `json:"testSuiteFk,omitempty"`
	Name *string `json:"name,omitempty"`
	ClassName *string `json:"className,omitempty"`
	Time *float32 `json:"time,omitempty"`
	TestStatusFk *string `json:"testStatusFk,omitempty"`
	TestStatus *string `json:"testStatus,omitempty"`
}

// NewTestCase instantiates a new TestCase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestCase() *TestCase {
	this := TestCase{}
	return &this
}

// NewTestCaseWithDefaults instantiates a new TestCase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestCaseWithDefaults() *TestCase {
	this := TestCase{}
	return &this
}

// GetTestCaseId returns the TestCaseId field value if set, zero value otherwise.
func (o *TestCase) GetTestCaseId() int64 {
	if o == nil || o.TestCaseId == nil {
		var ret int64
		return ret
	}
	return *o.TestCaseId
}

// GetTestCaseIdOk returns a tuple with the TestCaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetTestCaseIdOk() (*int64, bool) {
	if o == nil || o.TestCaseId == nil {
		return nil, false
	}
	return o.TestCaseId, true
}

// HasTestCaseId returns a boolean if a field has been set.
func (o *TestCase) HasTestCaseId() bool {
	if o != nil && o.TestCaseId != nil {
		return true
	}

	return false
}

// SetTestCaseId gets a reference to the given int64 and assigns it to the TestCaseId field.
func (o *TestCase) SetTestCaseId(v int64) {
	o.TestCaseId = &v
}

// GetTestSuiteFk returns the TestSuiteFk field value if set, zero value otherwise.
func (o *TestCase) GetTestSuiteFk() int64 {
	if o == nil || o.TestSuiteFk == nil {
		var ret int64
		return ret
	}
	return *o.TestSuiteFk
}

// GetTestSuiteFkOk returns a tuple with the TestSuiteFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetTestSuiteFkOk() (*int64, bool) {
	if o == nil || o.TestSuiteFk == nil {
		return nil, false
	}
	return o.TestSuiteFk, true
}

// HasTestSuiteFk returns a boolean if a field has been set.
func (o *TestCase) HasTestSuiteFk() bool {
	if o != nil && o.TestSuiteFk != nil {
		return true
	}

	return false
}

// SetTestSuiteFk gets a reference to the given int64 and assigns it to the TestSuiteFk field.
func (o *TestCase) SetTestSuiteFk(v int64) {
	o.TestSuiteFk = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TestCase) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TestCase) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TestCase) SetName(v string) {
	o.Name = &v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *TestCase) GetClassName() string {
	if o == nil || o.ClassName == nil {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetClassNameOk() (*string, bool) {
	if o == nil || o.ClassName == nil {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *TestCase) HasClassName() bool {
	if o != nil && o.ClassName != nil {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *TestCase) SetClassName(v string) {
	o.ClassName = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TestCase) GetTime() float32 {
	if o == nil || o.Time == nil {
		var ret float32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetTimeOk() (*float32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TestCase) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float32 and assigns it to the Time field.
func (o *TestCase) SetTime(v float32) {
	o.Time = &v
}

// GetTestStatusFk returns the TestStatusFk field value if set, zero value otherwise.
func (o *TestCase) GetTestStatusFk() string {
	if o == nil || o.TestStatusFk == nil {
		var ret string
		return ret
	}
	return *o.TestStatusFk
}

// GetTestStatusFkOk returns a tuple with the TestStatusFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetTestStatusFkOk() (*string, bool) {
	if o == nil || o.TestStatusFk == nil {
		return nil, false
	}
	return o.TestStatusFk, true
}

// HasTestStatusFk returns a boolean if a field has been set.
func (o *TestCase) HasTestStatusFk() bool {
	if o != nil && o.TestStatusFk != nil {
		return true
	}

	return false
}

// SetTestStatusFk gets a reference to the given string and assigns it to the TestStatusFk field.
func (o *TestCase) SetTestStatusFk(v string) {
	o.TestStatusFk = &v
}

// GetTestStatus returns the TestStatus field value if set, zero value otherwise.
func (o *TestCase) GetTestStatus() string {
	if o == nil || o.TestStatus == nil {
		var ret string
		return ret
	}
	return *o.TestStatus
}

// GetTestStatusOk returns a tuple with the TestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestCase) GetTestStatusOk() (*string, bool) {
	if o == nil || o.TestStatus == nil {
		return nil, false
	}
	return o.TestStatus, true
}

// HasTestStatus returns a boolean if a field has been set.
func (o *TestCase) HasTestStatus() bool {
	if o != nil && o.TestStatus != nil {
		return true
	}

	return false
}

// SetTestStatus gets a reference to the given string and assigns it to the TestStatus field.
func (o *TestCase) SetTestStatus(v string) {
	o.TestStatus = &v
}

func (o TestCase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TestCaseId != nil {
		toSerialize["testCaseId"] = o.TestCaseId
	}
	if o.TestSuiteFk != nil {
		toSerialize["testSuiteFk"] = o.TestSuiteFk
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ClassName != nil {
		toSerialize["className"] = o.ClassName
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.TestStatusFk != nil {
		toSerialize["testStatusFk"] = o.TestStatusFk
	}
	if o.TestStatus != nil {
		toSerialize["testStatus"] = o.TestStatus
	}
	return json.Marshal(toSerialize)
}

type NullableTestCase struct {
	value *TestCase
	isSet bool
}

func (v NullableTestCase) Get() *TestCase {
	return v.value
}

func (v *NullableTestCase) Set(val *TestCase) {
	v.value = val
	v.isSet = true
}

func (v NullableTestCase) IsSet() bool {
	return v.isSet
}

func (v *NullableTestCase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestCase(val *TestCase) *NullableTestCase {
	return &NullableTestCase{value: val, isSet: true}
}

func (v NullableTestCase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestCase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


