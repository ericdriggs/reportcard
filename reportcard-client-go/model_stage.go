/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Stage struct for Stage
type Stage struct {
	StageId *int64 `json:"stageId,omitempty"`
	StageName *string `json:"stageName,omitempty"`
	ExecutionFk *int64 `json:"executionFk,omitempty"`
}

// NewStage instantiates a new Stage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStage() *Stage {
	this := Stage{}
	return &this
}

// NewStageWithDefaults instantiates a new Stage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageWithDefaults() *Stage {
	this := Stage{}
	return &this
}

// GetStageId returns the StageId field value if set, zero value otherwise.
func (o *Stage) GetStageId() int64 {
	if o == nil || o.StageId == nil {
		var ret int64
		return ret
	}
	return *o.StageId
}

// GetStageIdOk returns a tuple with the StageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetStageIdOk() (*int64, bool) {
	if o == nil || o.StageId == nil {
		return nil, false
	}
	return o.StageId, true
}

// HasStageId returns a boolean if a field has been set.
func (o *Stage) HasStageId() bool {
	if o != nil && o.StageId != nil {
		return true
	}

	return false
}

// SetStageId gets a reference to the given int64 and assigns it to the StageId field.
func (o *Stage) SetStageId(v int64) {
	o.StageId = &v
}

// GetStageName returns the StageName field value if set, zero value otherwise.
func (o *Stage) GetStageName() string {
	if o == nil || o.StageName == nil {
		var ret string
		return ret
	}
	return *o.StageName
}

// GetStageNameOk returns a tuple with the StageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetStageNameOk() (*string, bool) {
	if o == nil || o.StageName == nil {
		return nil, false
	}
	return o.StageName, true
}

// HasStageName returns a boolean if a field has been set.
func (o *Stage) HasStageName() bool {
	if o != nil && o.StageName != nil {
		return true
	}

	return false
}

// SetStageName gets a reference to the given string and assigns it to the StageName field.
func (o *Stage) SetStageName(v string) {
	o.StageName = &v
}

// GetExecutionFk returns the ExecutionFk field value if set, zero value otherwise.
func (o *Stage) GetExecutionFk() int64 {
	if o == nil || o.ExecutionFk == nil {
		var ret int64
		return ret
	}
	return *o.ExecutionFk
}

// GetExecutionFkOk returns a tuple with the ExecutionFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stage) GetExecutionFkOk() (*int64, bool) {
	if o == nil || o.ExecutionFk == nil {
		return nil, false
	}
	return o.ExecutionFk, true
}

// HasExecutionFk returns a boolean if a field has been set.
func (o *Stage) HasExecutionFk() bool {
	if o != nil && o.ExecutionFk != nil {
		return true
	}

	return false
}

// SetExecutionFk gets a reference to the given int64 and assigns it to the ExecutionFk field.
func (o *Stage) SetExecutionFk(v int64) {
	o.ExecutionFk = &v
}

func (o Stage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StageId != nil {
		toSerialize["stageId"] = o.StageId
	}
	if o.StageName != nil {
		toSerialize["stageName"] = o.StageName
	}
	if o.ExecutionFk != nil {
		toSerialize["executionFk"] = o.ExecutionFk
	}
	return json.Marshal(toSerialize)
}

type NullableStage struct {
	value *Stage
	isSet bool
}

func (v NullableStage) Get() *Stage {
	return v.value
}

func (v *NullableStage) Set(val *Stage) {
	v.value = val
	v.isSet = true
}

func (v NullableStage) IsSet() bool {
	return v.isSet
}

func (v *NullableStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStage(val *Stage) *NullableStage {
	return &NullableStage{value: val, isSet: true}
}

func (v NullableStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


