/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MetadataJsonControllerApiService MetadataJsonControllerApi service
type MetadataJsonControllerApiService service

type ApiGetBranchRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
}


func (r ApiGetBranchRequest) Execute() (map[string][]Sha, *_nethttp.Response, error) {
	return r.ApiService.GetBranchExecute(r)
}

/*
 * GetBranch Method for GetBranch
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @return ApiGetBranchRequest
 */
func (a *MetadataJsonControllerApiService) GetBranch(ctx _context.Context, org string, repo string, branch string) ApiGetBranchRequest {
	return ApiGetBranchRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Sha
 */
func (a *MetadataJsonControllerApiService) GetBranchExecute(r ApiGetBranchRequest) (map[string][]Sha, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Sha
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetBranch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBranchesRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
}


func (r ApiGetBranchesRequest) Execute() (map[string][]Sha, *_nethttp.Response, error) {
	return r.ApiService.GetBranchesExecute(r)
}

/*
 * GetBranches Method for GetBranches
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @return ApiGetBranchesRequest
 */
func (a *MetadataJsonControllerApiService) GetBranches(ctx _context.Context, org string, repo string) ApiGetBranchesRequest {
	return ApiGetBranchesRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Sha
 */
func (a *MetadataJsonControllerApiService) GetBranchesExecute(r ApiGetBranchesRequest) (map[string][]Sha, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Sha
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetBranches")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetContextRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
	host string
	application *string
	pipeline *string
}

func (r ApiGetContextRequest) Application(application string) ApiGetContextRequest {
	r.application = &application
	return r
}
func (r ApiGetContextRequest) Pipeline(pipeline string) ApiGetContextRequest {
	r.pipeline = &pipeline
	return r
}

func (r ApiGetContextRequest) Execute() (map[string][]Execution, *_nethttp.Response, error) {
	return r.ApiService.GetContextExecute(r)
}

/*
 * GetContext Method for GetContext
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @param host
 * @return ApiGetContextRequest
 */
func (a *MetadataJsonControllerApiService) GetContext(ctx _context.Context, org string, repo string, branch string, sha string, host string) ApiGetContextRequest {
	return ApiGetContextRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
		host: host,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Execution
 */
func (a *MetadataJsonControllerApiService) GetContextExecute(r ApiGetContextRequest) (map[string][]Execution, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Execution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetContext")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts/{host}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.application == nil {
		return localVarReturnValue, nil, reportError("application is required and must be specified")
	}
	if r.pipeline == nil {
		return localVarReturnValue, nil, reportError("pipeline is required and must be specified")
	}

	localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	localVarQueryParams.Add("pipeline", parameterToString(*r.pipeline, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetContextsRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
}


func (r ApiGetContextsRequest) Execute() (map[string][]Execution, *_nethttp.Response, error) {
	return r.ApiService.GetContextsExecute(r)
}

/*
 * GetContexts Method for GetContexts
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @return ApiGetContextsRequest
 */
func (a *MetadataJsonControllerApiService) GetContexts(ctx _context.Context, org string, repo string, branch string, sha string) ApiGetContextsRequest {
	return ApiGetContextsRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Execution
 */
func (a *MetadataJsonControllerApiService) GetContextsExecute(r ApiGetContextsRequest) (map[string][]Execution, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Execution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetContexts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
	host string
	externalExecutionId string
	application *string
	pipeline *string
}

func (r ApiGetExecutionRequest) Application(application string) ApiGetExecutionRequest {
	r.application = &application
	return r
}
func (r ApiGetExecutionRequest) Pipeline(pipeline string) ApiGetExecutionRequest {
	r.pipeline = &pipeline
	return r
}

func (r ApiGetExecutionRequest) Execute() (map[string][]Stage, *_nethttp.Response, error) {
	return r.ApiService.GetExecutionExecute(r)
}

/*
 * GetExecution Method for GetExecution
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @param host
 * @param externalExecutionId
 * @return ApiGetExecutionRequest
 */
func (a *MetadataJsonControllerApiService) GetExecution(ctx _context.Context, org string, repo string, branch string, sha string, host string, externalExecutionId string) ApiGetExecutionRequest {
	return ApiGetExecutionRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
		host: host,
		externalExecutionId: externalExecutionId,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Stage
 */
func (a *MetadataJsonControllerApiService) GetExecutionExecute(r ApiGetExecutionRequest) (map[string][]Stage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Stage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetExecution")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts/{host}/executions/{externalExecutionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"externalExecutionId"+"}", _neturl.PathEscape(parameterToString(r.externalExecutionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.application == nil {
		return localVarReturnValue, nil, reportError("application is required and must be specified")
	}
	if r.pipeline == nil {
		return localVarReturnValue, nil, reportError("pipeline is required and must be specified")
	}

	localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	localVarQueryParams.Add("pipeline", parameterToString(*r.pipeline, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionsRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
	host string
	application *string
	pipeline *string
}

func (r ApiGetExecutionsRequest) Application(application string) ApiGetExecutionsRequest {
	r.application = &application
	return r
}
func (r ApiGetExecutionsRequest) Pipeline(pipeline string) ApiGetExecutionsRequest {
	r.pipeline = &pipeline
	return r
}

func (r ApiGetExecutionsRequest) Execute() (map[string][]Stage, *_nethttp.Response, error) {
	return r.ApiService.GetExecutionsExecute(r)
}

/*
 * GetExecutions Method for GetExecutions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @param host
 * @return ApiGetExecutionsRequest
 */
func (a *MetadataJsonControllerApiService) GetExecutions(ctx _context.Context, org string, repo string, branch string, sha string, host string) ApiGetExecutionsRequest {
	return ApiGetExecutionsRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
		host: host,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Stage
 */
func (a *MetadataJsonControllerApiService) GetExecutionsExecute(r ApiGetExecutionsRequest) (map[string][]Stage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Stage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetExecutions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts/{host}/executions"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.application == nil {
		return localVarReturnValue, nil, reportError("application is required and must be specified")
	}
	if r.pipeline == nil {
		return localVarReturnValue, nil, reportError("pipeline is required and must be specified")
	}

	localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	localVarQueryParams.Add("pipeline", parameterToString(*r.pipeline, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrgRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
}


func (r ApiGetOrgRequest) Execute() (map[string][]Repo, *_nethttp.Response, error) {
	return r.ApiService.GetOrgExecute(r)
}

/*
 * GetOrg Method for GetOrg
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @return ApiGetOrgRequest
 */
func (a *MetadataJsonControllerApiService) GetOrg(ctx _context.Context, org string) ApiGetOrgRequest {
	return ApiGetOrgRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Repo
 */
func (a *MetadataJsonControllerApiService) GetOrgExecute(r ApiGetOrgRequest) (map[string][]Repo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Repo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetOrg")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrgsRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
}


func (r ApiGetOrgsRequest) Execute() (map[string][]Repo, *_nethttp.Response, error) {
	return r.ApiService.GetOrgsExecute(r)
}

/*
 * GetOrgs Method for GetOrgs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetOrgsRequest
 */
func (a *MetadataJsonControllerApiService) GetOrgs(ctx _context.Context) ApiGetOrgsRequest {
	return ApiGetOrgsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Repo
 */
func (a *MetadataJsonControllerApiService) GetOrgsExecute(r ApiGetOrgsRequest) (map[string][]Repo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Repo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetOrgs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRepoRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
}


func (r ApiGetRepoRequest) Execute() (map[string][]Branch, *_nethttp.Response, error) {
	return r.ApiService.GetRepoExecute(r)
}

/*
 * GetRepo Method for GetRepo
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @return ApiGetRepoRequest
 */
func (a *MetadataJsonControllerApiService) GetRepo(ctx _context.Context, org string, repo string) ApiGetRepoRequest {
	return ApiGetRepoRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Branch
 */
func (a *MetadataJsonControllerApiService) GetRepoExecute(r ApiGetRepoRequest) (map[string][]Branch, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Branch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetRepo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReposRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
}


func (r ApiGetReposRequest) Execute() (map[string][]Branch, *_nethttp.Response, error) {
	return r.ApiService.GetReposExecute(r)
}

/*
 * GetRepos Method for GetRepos
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @return ApiGetReposRequest
 */
func (a *MetadataJsonControllerApiService) GetRepos(ctx _context.Context, org string) ApiGetReposRequest {
	return ApiGetReposRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Branch
 */
func (a *MetadataJsonControllerApiService) GetReposExecute(r ApiGetReposRequest) (map[string][]Branch, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Branch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetRepos")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShaRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
}


func (r ApiGetShaRequest) Execute() (map[string][]Context, *_nethttp.Response, error) {
	return r.ApiService.GetShaExecute(r)
}

/*
 * GetSha Method for GetSha
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @return ApiGetShaRequest
 */
func (a *MetadataJsonControllerApiService) GetSha(ctx _context.Context, org string, repo string, branch string, sha string) ApiGetShaRequest {
	return ApiGetShaRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Context
 */
func (a *MetadataJsonControllerApiService) GetShaExecute(r ApiGetShaRequest) (map[string][]Context, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Context
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetSha")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetShasRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
}


func (r ApiGetShasRequest) Execute() (map[string][]Context, *_nethttp.Response, error) {
	return r.ApiService.GetShasExecute(r)
}

/*
 * GetShas Method for GetShas
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @return ApiGetShasRequest
 */
func (a *MetadataJsonControllerApiService) GetShas(ctx _context.Context, org string, repo string, branch string) ApiGetShasRequest {
	return ApiGetShasRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
	}
}

/*
 * Execute executes the request
 * @return map[string][]Context
 */
func (a *MetadataJsonControllerApiService) GetShasExecute(r ApiGetShasRequest) (map[string][]Context, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]Context
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetShas")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStageRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
	host string
	executionName string
	stage string
	application *string
	pipeline *string
}

func (r ApiGetStageRequest) Application(application string) ApiGetStageRequest {
	r.application = &application
	return r
}
func (r ApiGetStageRequest) Pipeline(pipeline string) ApiGetStageRequest {
	r.pipeline = &pipeline
	return r
}

func (r ApiGetStageRequest) Execute() (map[string][]TestResult, *_nethttp.Response, error) {
	return r.ApiService.GetStageExecute(r)
}

/*
 * GetStage Method for GetStage
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @param host
 * @param executionName
 * @param stage
 * @return ApiGetStageRequest
 */
func (a *MetadataJsonControllerApiService) GetStage(ctx _context.Context, org string, repo string, branch string, sha string, host string, executionName string, stage string) ApiGetStageRequest {
	return ApiGetStageRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
		host: host,
		executionName: executionName,
		stage: stage,
	}
}

/*
 * Execute executes the request
 * @return map[string][]TestResult
 */
func (a *MetadataJsonControllerApiService) GetStageExecute(r ApiGetStageRequest) (map[string][]TestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]TestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetStage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts/{host}/executions/{executionName}/stages/{stage}"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"executionName"+"}", _neturl.PathEscape(parameterToString(r.executionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"stage"+"}", _neturl.PathEscape(parameterToString(r.stage, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.application == nil {
		return localVarReturnValue, nil, reportError("application is required and must be specified")
	}
	if r.pipeline == nil {
		return localVarReturnValue, nil, reportError("pipeline is required and must be specified")
	}

	localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	localVarQueryParams.Add("pipeline", parameterToString(*r.pipeline, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStagesRequest struct {
	ctx _context.Context
	ApiService *MetadataJsonControllerApiService
	org string
	repo string
	branch string
	sha string
	host string
	executionName string
	application *string
	pipeline *string
}

func (r ApiGetStagesRequest) Application(application string) ApiGetStagesRequest {
	r.application = &application
	return r
}
func (r ApiGetStagesRequest) Pipeline(pipeline string) ApiGetStagesRequest {
	r.pipeline = &pipeline
	return r
}

func (r ApiGetStagesRequest) Execute() (map[string][]TestResult, *_nethttp.Response, error) {
	return r.ApiService.GetStagesExecute(r)
}

/*
 * GetStages Method for GetStages
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param org
 * @param repo
 * @param branch
 * @param sha
 * @param host
 * @param executionName
 * @return ApiGetStagesRequest
 */
func (a *MetadataJsonControllerApiService) GetStages(ctx _context.Context, org string, repo string, branch string, sha string, host string, executionName string) ApiGetStagesRequest {
	return ApiGetStagesRequest{
		ApiService: a,
		ctx: ctx,
		org: org,
		repo: repo,
		branch: branch,
		sha: sha,
		host: host,
		executionName: executionName,
	}
}

/*
 * Execute executes the request
 * @return map[string][]TestResult
 */
func (a *MetadataJsonControllerApiService) GetStagesExecute(r ApiGetStagesRequest) (map[string][]TestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string][]TestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetadataJsonControllerApiService.GetStages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/orgs/{org}/repos/{repo}/branches/{branch}/shas/{sha}/contexts/{host}/executions/{executionName}/stages"
	localVarPath = strings.Replace(localVarPath, "{"+"org"+"}", _neturl.PathEscape(parameterToString(r.org, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", _neturl.PathEscape(parameterToString(r.repo, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"branch"+"}", _neturl.PathEscape(parameterToString(r.branch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sha"+"}", _neturl.PathEscape(parameterToString(r.sha, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"host"+"}", _neturl.PathEscape(parameterToString(r.host, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"executionName"+"}", _neturl.PathEscape(parameterToString(r.executionName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.application == nil {
		return localVarReturnValue, nil, reportError("application is required and must be specified")
	}
	if r.pipeline == nil {
		return localVarReturnValue, nil, reportError("pipeline is required and must be specified")
	}

	localVarQueryParams.Add("application", parameterToString(*r.application, ""))
	localVarQueryParams.Add("pipeline", parameterToString(*r.pipeline, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
