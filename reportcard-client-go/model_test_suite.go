/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestSuite struct for TestSuite
type TestSuite struct {
	TestSuiteId *int64 `json:"testSuiteId,omitempty"`
	TestResultFk *int64 `json:"testResultFk,omitempty"`
	Tests *int32 `json:"tests,omitempty"`
	Skipped *int32 `json:"skipped,omitempty"`
	Error *int32 `json:"error,omitempty"`
	Failure *int32 `json:"failure,omitempty"`
	Time *float32 `json:"time,omitempty"`
	Group *string `json:"group,omitempty"`
	Properties *string `json:"properties,omitempty"`
	IsSuccess *bool `json:"isSuccess,omitempty"`
	HasSkip *bool `json:"hasSkip,omitempty"`
	TestCases *[]TestCase `json:"testCases,omitempty"`
	Package *string `json:"package,omitempty"`
}

// NewTestSuite instantiates a new TestSuite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSuite() *TestSuite {
	this := TestSuite{}
	return &this
}

// NewTestSuiteWithDefaults instantiates a new TestSuite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSuiteWithDefaults() *TestSuite {
	this := TestSuite{}
	return &this
}

// GetTestSuiteId returns the TestSuiteId field value if set, zero value otherwise.
func (o *TestSuite) GetTestSuiteId() int64 {
	if o == nil || o.TestSuiteId == nil {
		var ret int64
		return ret
	}
	return *o.TestSuiteId
}

// GetTestSuiteIdOk returns a tuple with the TestSuiteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTestSuiteIdOk() (*int64, bool) {
	if o == nil || o.TestSuiteId == nil {
		return nil, false
	}
	return o.TestSuiteId, true
}

// HasTestSuiteId returns a boolean if a field has been set.
func (o *TestSuite) HasTestSuiteId() bool {
	if o != nil && o.TestSuiteId != nil {
		return true
	}

	return false
}

// SetTestSuiteId gets a reference to the given int64 and assigns it to the TestSuiteId field.
func (o *TestSuite) SetTestSuiteId(v int64) {
	o.TestSuiteId = &v
}

// GetTestResultFk returns the TestResultFk field value if set, zero value otherwise.
func (o *TestSuite) GetTestResultFk() int64 {
	if o == nil || o.TestResultFk == nil {
		var ret int64
		return ret
	}
	return *o.TestResultFk
}

// GetTestResultFkOk returns a tuple with the TestResultFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTestResultFkOk() (*int64, bool) {
	if o == nil || o.TestResultFk == nil {
		return nil, false
	}
	return o.TestResultFk, true
}

// HasTestResultFk returns a boolean if a field has been set.
func (o *TestSuite) HasTestResultFk() bool {
	if o != nil && o.TestResultFk != nil {
		return true
	}

	return false
}

// SetTestResultFk gets a reference to the given int64 and assigns it to the TestResultFk field.
func (o *TestSuite) SetTestResultFk(v int64) {
	o.TestResultFk = &v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *TestSuite) GetTests() int32 {
	if o == nil || o.Tests == nil {
		var ret int32
		return ret
	}
	return *o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTestsOk() (*int32, bool) {
	if o == nil || o.Tests == nil {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *TestSuite) HasTests() bool {
	if o != nil && o.Tests != nil {
		return true
	}

	return false
}

// SetTests gets a reference to the given int32 and assigns it to the Tests field.
func (o *TestSuite) SetTests(v int32) {
	o.Tests = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
func (o *TestSuite) GetSkipped() int32 {
	if o == nil || o.Skipped == nil {
		var ret int32
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetSkippedOk() (*int32, bool) {
	if o == nil || o.Skipped == nil {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *TestSuite) HasSkipped() bool {
	if o != nil && o.Skipped != nil {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given int32 and assigns it to the Skipped field.
func (o *TestSuite) SetSkipped(v int32) {
	o.Skipped = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TestSuite) GetError() int32 {
	if o == nil || o.Error == nil {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetErrorOk() (*int32, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TestSuite) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *TestSuite) SetError(v int32) {
	o.Error = &v
}

// GetFailure returns the Failure field value if set, zero value otherwise.
func (o *TestSuite) GetFailure() int32 {
	if o == nil || o.Failure == nil {
		var ret int32
		return ret
	}
	return *o.Failure
}

// GetFailureOk returns a tuple with the Failure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetFailureOk() (*int32, bool) {
	if o == nil || o.Failure == nil {
		return nil, false
	}
	return o.Failure, true
}

// HasFailure returns a boolean if a field has been set.
func (o *TestSuite) HasFailure() bool {
	if o != nil && o.Failure != nil {
		return true
	}

	return false
}

// SetFailure gets a reference to the given int32 and assigns it to the Failure field.
func (o *TestSuite) SetFailure(v int32) {
	o.Failure = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TestSuite) GetTime() float32 {
	if o == nil || o.Time == nil {
		var ret float32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTimeOk() (*float32, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TestSuite) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given float32 and assigns it to the Time field.
func (o *TestSuite) SetTime(v float32) {
	o.Time = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *TestSuite) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *TestSuite) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *TestSuite) SetGroup(v string) {
	o.Group = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *TestSuite) GetProperties() string {
	if o == nil || o.Properties == nil {
		var ret string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetPropertiesOk() (*string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *TestSuite) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given string and assigns it to the Properties field.
func (o *TestSuite) SetProperties(v string) {
	o.Properties = &v
}

// GetIsSuccess returns the IsSuccess field value if set, zero value otherwise.
func (o *TestSuite) GetIsSuccess() bool {
	if o == nil || o.IsSuccess == nil {
		var ret bool
		return ret
	}
	return *o.IsSuccess
}

// GetIsSuccessOk returns a tuple with the IsSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetIsSuccessOk() (*bool, bool) {
	if o == nil || o.IsSuccess == nil {
		return nil, false
	}
	return o.IsSuccess, true
}

// HasIsSuccess returns a boolean if a field has been set.
func (o *TestSuite) HasIsSuccess() bool {
	if o != nil && o.IsSuccess != nil {
		return true
	}

	return false
}

// SetIsSuccess gets a reference to the given bool and assigns it to the IsSuccess field.
func (o *TestSuite) SetIsSuccess(v bool) {
	o.IsSuccess = &v
}

// GetHasSkip returns the HasSkip field value if set, zero value otherwise.
func (o *TestSuite) GetHasSkip() bool {
	if o == nil || o.HasSkip == nil {
		var ret bool
		return ret
	}
	return *o.HasSkip
}

// GetHasSkipOk returns a tuple with the HasSkip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetHasSkipOk() (*bool, bool) {
	if o == nil || o.HasSkip == nil {
		return nil, false
	}
	return o.HasSkip, true
}

// HasHasSkip returns a boolean if a field has been set.
func (o *TestSuite) HasHasSkip() bool {
	if o != nil && o.HasSkip != nil {
		return true
	}

	return false
}

// SetHasSkip gets a reference to the given bool and assigns it to the HasSkip field.
func (o *TestSuite) SetHasSkip(v bool) {
	o.HasSkip = &v
}

// GetTestCases returns the TestCases field value if set, zero value otherwise.
func (o *TestSuite) GetTestCases() []TestCase {
	if o == nil || o.TestCases == nil {
		var ret []TestCase
		return ret
	}
	return *o.TestCases
}

// GetTestCasesOk returns a tuple with the TestCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetTestCasesOk() (*[]TestCase, bool) {
	if o == nil || o.TestCases == nil {
		return nil, false
	}
	return o.TestCases, true
}

// HasTestCases returns a boolean if a field has been set.
func (o *TestSuite) HasTestCases() bool {
	if o != nil && o.TestCases != nil {
		return true
	}

	return false
}

// SetTestCases gets a reference to the given []TestCase and assigns it to the TestCases field.
func (o *TestSuite) SetTestCases(v []TestCase) {
	o.TestCases = &v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *TestSuite) GetPackage() string {
	if o == nil || o.Package == nil {
		var ret string
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestSuite) GetPackageOk() (*string, bool) {
	if o == nil || o.Package == nil {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *TestSuite) HasPackage() bool {
	if o != nil && o.Package != nil {
		return true
	}

	return false
}

// SetPackage gets a reference to the given string and assigns it to the Package field.
func (o *TestSuite) SetPackage(v string) {
	o.Package = &v
}

func (o TestSuite) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TestSuiteId != nil {
		toSerialize["testSuiteId"] = o.TestSuiteId
	}
	if o.TestResultFk != nil {
		toSerialize["testResultFk"] = o.TestResultFk
	}
	if o.Tests != nil {
		toSerialize["tests"] = o.Tests
	}
	if o.Skipped != nil {
		toSerialize["skipped"] = o.Skipped
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Failure != nil {
		toSerialize["failure"] = o.Failure
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.IsSuccess != nil {
		toSerialize["isSuccess"] = o.IsSuccess
	}
	if o.HasSkip != nil {
		toSerialize["hasSkip"] = o.HasSkip
	}
	if o.TestCases != nil {
		toSerialize["testCases"] = o.TestCases
	}
	if o.Package != nil {
		toSerialize["package"] = o.Package
	}
	return json.Marshal(toSerialize)
}

type NullableTestSuite struct {
	value *TestSuite
	isSet bool
}

func (v NullableTestSuite) Get() *TestSuite {
	return v.value
}

func (v *NullableTestSuite) Set(val *TestSuite) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSuite) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSuite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSuite(val *TestSuite) *NullableTestSuite {
	return &NullableTestSuite{value: val, isSet: true}
}

func (v NullableTestSuite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSuite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


