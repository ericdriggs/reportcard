/*
 * OpenAPI definition
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Branch struct for Branch
type Branch struct {
	BranchId *int32 `json:"branchId,omitempty"`
	BranchName *string `json:"branchName,omitempty"`
	RepoFk *int32 `json:"repoFk,omitempty"`
}

// NewBranch instantiates a new Branch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranch() *Branch {
	this := Branch{}
	return &this
}

// NewBranchWithDefaults instantiates a new Branch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchWithDefaults() *Branch {
	this := Branch{}
	return &this
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *Branch) GetBranchId() int32 {
	if o == nil || o.BranchId == nil {
		var ret int32
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetBranchIdOk() (*int32, bool) {
	if o == nil || o.BranchId == nil {
		return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *Branch) HasBranchId() bool {
	if o != nil && o.BranchId != nil {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given int32 and assigns it to the BranchId field.
func (o *Branch) SetBranchId(v int32) {
	o.BranchId = &v
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *Branch) GetBranchName() string {
	if o == nil || o.BranchName == nil {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetBranchNameOk() (*string, bool) {
	if o == nil || o.BranchName == nil {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *Branch) HasBranchName() bool {
	if o != nil && o.BranchName != nil {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *Branch) SetBranchName(v string) {
	o.BranchName = &v
}

// GetRepoFk returns the RepoFk field value if set, zero value otherwise.
func (o *Branch) GetRepoFk() int32 {
	if o == nil || o.RepoFk == nil {
		var ret int32
		return ret
	}
	return *o.RepoFk
}

// GetRepoFkOk returns a tuple with the RepoFk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branch) GetRepoFkOk() (*int32, bool) {
	if o == nil || o.RepoFk == nil {
		return nil, false
	}
	return o.RepoFk, true
}

// HasRepoFk returns a boolean if a field has been set.
func (o *Branch) HasRepoFk() bool {
	if o != nil && o.RepoFk != nil {
		return true
	}

	return false
}

// SetRepoFk gets a reference to the given int32 and assigns it to the RepoFk field.
func (o *Branch) SetRepoFk(v int32) {
	o.RepoFk = &v
}

func (o Branch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BranchId != nil {
		toSerialize["branchId"] = o.BranchId
	}
	if o.BranchName != nil {
		toSerialize["branchName"] = o.BranchName
	}
	if o.RepoFk != nil {
		toSerialize["repoFk"] = o.RepoFk
	}
	return json.Marshal(toSerialize)
}

type NullableBranch struct {
	value *Branch
	isSet bool
}

func (v NullableBranch) Get() *Branch {
	return v.value
}

func (v *NullableBranch) Set(val *Branch) {
	v.value = val
	v.isSet = true
}

func (v NullableBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranch(val *Branch) *NullableBranch {
	return &NullableBranch{value: val, isSet: true}
}

func (v NullableBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


