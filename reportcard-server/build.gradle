buildscript {
    ext {
        awsSdkVersion = "2.23.3"
        awsCrtVersion = "0.29.7"
        jaxbVersion = '2.3.1'
        mysqlPassword=System.getenv("MYSQL_PASSWORD")
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'mysql:mysql-connector-java:8.0.20'
        classpath files('libs/reportcard-jooq-generator.jar')
    }
}
plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'nu.studer.jooq' version '8.0'
//    id "org.flywaydb.flyway" version "7.8.2"
}



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation project(':reportcard-model')
    testImplementation "net.javacrumbs.json-unit:json-unit:${jsonUnitVersion}"
    //Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'

    //XML
    implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"

    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-logging'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //Database
    implementation 'mysql:mysql-connector-java'
    implementation 'org.jooq:jooq'
    implementation 'org.jooq:jooq-codegen'
    implementation 'org.springframework.boot:spring-boot-starter-jooq:2.7.14'
    implementation 'mysql:mysql-connector-java:8.0.28'
    jooqGenerator 'mysql:mysql-connector-java:8.0.28'

    //DB Migration
    //implementation 'org.flywaydb:flyway-core:7.8.2'

    //File
    implementation 'commons-io:commons-io:2.11.0'

    //compress/decompress files
    implementation 'org.apache.commons:commons-compress:1.26.0'



    //AWS
    implementation platform("software.amazon.awssdk:bom:${awsSdkVersion}")
    implementation("software.amazon.awssdk:s3-transfer-manager")
    implementation("software.amazon.awssdk.crt:aws-crt:${awsCrtVersion}")

    //AWS Test
    testImplementation('org.testcontainers:localstack:1.19.3')

    //DB Test
    implementation platform('org.testcontainers:testcontainers-bom:1.19.3')
    testImplementation ("org.testcontainers:junit-jupiter")
    testImplementation('org.testcontainers:mysql')

    //Mapping
    implementation 'org.modelmapper:modelmapper:2.3.0'
    implementation 'org.modelmapper.extensions:modelmapper-jooq:3.1.1'

    //Test
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    jooqGenerator("jakarta.xml.bind:jakarta.xml.bind-api:3.0.1")
    //jooqGenerator("jakarta.xml.bind:jakarta.xml.bind-api:${jakartaVersion}")
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

import java.util.regex.Matcher

task generateJooqSchemaSource {
    group = "jooq"
    version = "3.18.4"
    doLast {
        GenerationTool.generate(new Configuration()
                .withJdbc(new Jdbc()
                        .withDriver('com.mysql.cj.jdbc.Driver')
                        .withUrl('jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC')
                        .withUser('root')
                        .withPassword(mysqlPassword)
                        .withProperties(Arrays.asList(new Property().withKey("ssl").withValue("true")))
                )
                .withGenerator(new Generator()

                        .withName('org.jooq.codegen.JavaLombokGenerator')
                        .withStrategy(new Strategy()
                                .withName('org.jooq.codegen.DefaultGeneratorStrategy')
                        )
                        .withDatabase(new Database()
                                .withName('org.jooq.meta.mysql.MySQLDatabase')
                                .withInputSchema('reportcard')
                                .withUnsignedTypes(false)
                                .withForcedTypes(
                                        Arrays.asList(
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('JSONB?'),
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('INET'),
                                                new ForcedType()
                                                        .withName('BOOLEAN').withIncludeExpression("is_.*").withIncludeTypes('tinyint.*'),
                                                new ForcedType()
                                                        .withName('Boolean').withIncludeExpression("has_.*").withIncludeTypes('tinyint.*'),
                                                new ForcedType()
                                                        .withName('Integer').withIncludeExpression("storage_type").withIncludeTypes('tinyint.*')

                                        )
                                )
                        )
                        .withGenerate(new Generate()
                                .withGeneratedAnnotation(true)
                                .withDaos(true)
                                .withRelations(true)
                                .withDeprecated(false)
                                .withRecords(true)
                                .withPojos(true)
                                .withImmutablePojos(false)
                                .withFluentSetters(true)
                                .withJavaTimeTypes(true)
                                .withGeneratedSerialVersionUID(GeneratedSerialVersionUID.HASH)
                        )
                        .withTarget(new Target()
                                .withPackageName('io.github.ericdriggs.reportcard.gen.db')
                                .withDirectory('/Users/eric.r.driggs/github/ericdriggs/reportcard/reportcard-server/src/generated/java')
                        )
                        .withStrategy(new Strategy().withName("org.jooq.codegen.SuffixGeneratorStrategy"))
                )
        )
    }
}

jooq {
    version = '3.18.4'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS
    configurations {
        generated {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC'
                    user = 'root'
                    password = mysqlPassword
                    properties {
                        property {
                            key = 'ssl'
                            value = 'true'
                        }
                    }
                }
                generator {

                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'reportcard'
                        unsignedTypes = false
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }

                            forcedType {
                                name = 'BOOLEAN'
                                includeExpression = 'is_.*'
                                includeTypes = "tinyint.*"
                            }
                            forcedType {
                                name = 'BOOLEAN'
                                includeExpression = 'has_.*'
                                includeTypes = "tinyint.*"
                            }
                        }
                    }
                    generate {
                        generatedAnnotation = true
                        generatedSerialVersionUID = "HASH"
                        daos = true
                        relations = true
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'io.github.ericdriggs.reportcard.gen.db'
                        directory = 'src/generated/java'
                    }
                }
            }
        }
    }
}
sourceSets.main.java.srcDirs += ['src/generated/java']

jar {
    enabled = true
}

bootJar {
    archiveClassifier = 'application'
}

//testing
sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
}

configurations {
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
    integrationTestCompile.extendsFrom testCompile
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}


task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test

    options {
        systemProperties(System.getProperties())
    }
}

bootRun {
    systemProperties System.properties
}

//address duplicated tag dependencyManagement https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/257
tasks.withType(GenerateMavenPom).all {
    doLast {
        File file = new File("$buildDir/publications/maven/pom-default.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact tasks.named("bootJar")
        }
    }
}

//needed since jooq version will override the version
version = "0.1.1"