buildscript {
    ext {
        jaxbVersion = '2.3.1'
        mysqlPassword=System.getenv("MYSQL_PASSWORD")
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'mysql:mysql-connector-java:8.0.20'
        classpath files('libs/reportcard-jooq-generator.jar')
    }
}
plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'nu.studer.jooq' version '5.2.1'
//    id "org.flywaydb.flyway" version "7.8.2"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    dependencies {
        implementation project(':reportcard-model')
    }
    //Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.8'

    //XML
    implementation "javax.xml.bind:jaxb-api:${jaxbVersion}"

    //Spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-logging'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    //Database
    implementation 'mysql:mysql-connector-java'
    implementation 'org.jooq:jooq'
    implementation 'org.jooq:jooq-codegen'
    implementation 'org.springframework.boot:spring-boot-starter-jooq:2.3.1.RELEASE'
    implementation 'mysql:mysql-connector-java:8.0.20'
    jooqGenerator 'mysql:mysql-connector-java:8.0.20'

    //DB Migration
    //implementation 'org.flywaydb:flyway-core:7.8.2'

    //DB Test
    testImplementation 'com.wix:wix-embedded-mysql:4.6.3-SNAPSHOT'

    //Mapping
    implementation 'org.modelmapper:modelmapper:2.3.0'
    implementation 'org.modelmapper.extensions:modelmapper-jooq:2.3.0'

    //Test
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'net.javacrumbs.json-unit:json-unit:2.37.0'
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

task generateJooqSchemaSource {
    group = "jooq"
    doLast {
        GenerationTool.generate(new Configuration()
                .withJdbc(new Jdbc()
                        .withDriver('com.mysql.cj.jdbc.Driver')
                        .withUrl('jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC')
                        .withUser('root')
                        .withPassword(mysqlPassword)
                        .withProperties(Arrays.asList(new Property().withKey("ssl").withValue("true")))
                )
                .withGenerator(new Generator()
                        .withName('org.jooq.codegen.JavaLombokGenerator')
                        .withStrategy(new Strategy()
                                .withName('org.jooq.codegen.DefaultGeneratorStrategy')
                        )
                        .withDatabase(new Database()
                                .withName('org.jooq.meta.mysql.MySQLDatabase')
                                .withInputSchema('reportcard')
                                .withUnsignedTypes(false)
                                .withForcedTypes(
                                        Arrays.asList(
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('JSONB?'),
                                                new ForcedType().withName('varchar')
                                                        .withIncludeExpression('.*').withIncludeTypes('INET'),
                                                new ForcedType()
                                                        .withName('BOOLEAN').withIncludeTypes('tinyint.*'),
                                                new ForcedType()
                                                        .withName('Boolean').withIncludeTypes('tinyint.*')
                                        )
                                )
                        )
                        .withGenerate(new Generate()
                                .withGeneratedAnnotation(true)
                                .withDaos(true)
                                .withRelations(true)
                                .withDeprecated(false)
                                .withRecords(true)
                                .withPojos(true)
                                .withImmutablePojos(false)
                                .withFluentSetters(true)
                        )
                        .withTarget(new Target()
                                .withPackageName('io.github.ericdriggs.reportcard.gen.db')
                                .withDirectory('/Users/eric.r.driggs/github/ericdriggs/reportcard/reportcard-server/src/generated/java')
                        )
                )
        )
    }
}

jooq {
    version = '3.14.9' //latest 3.16.5
    edition = nu.studer.gradle.jooq.JooqEdition.OSS
    configurations {
        generated {
            generateSchemaSourceOnCompilation = false
            generationTool {
                jdbc {
                    driver = 'com.mysql.cj.jdbc.Driver'
                    url = 'jdbc:mysql://127.0.0.1:3306/reportcard?serverTimezone=UTC'
                    user = 'root'
                    password = mysqlPassword
                    properties {
                        property {
                            key = 'ssl'
                            value = 'true'
                        }
                    }
                }
                generator {

                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                    }
                    database {
                        name = 'org.jooq.meta.mysql.MySQLDatabase'
                        inputSchema = 'reportcard'
                        unsignedTypes = false
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }

                            forcedType {
                                name = 'BOOLEAN'
                                includeExpression = 'is_.*'
                                includeTypes = "tinyint.*"
                            }
                            forcedType {
                                name = 'BOOLEAN'
                                includeExpression = 'has_.*'
                                includeTypes = "tinyint.*"
                            }
                        }
                    }
                    generate {
                        generatedAnnotation = true
                        generatedSerialVersionUID = "HASH"
                        daos = true
                        relations = true
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                    }
                    target {
                        packageName = 'io.github.ericdriggs.reportcard.gen.db'
                        directory = 'src/generated/java'
                    }
                }
            }
        }
    }
}
sourceSets.main.java.srcDirs += ['src/generated/java']

jar {
    enabled = true
}

bootJar {
    archiveClassifier = 'application'
}