/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.FaultContextRecord;

import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FaultContextTable extends TableImpl<FaultContextRecord> {

    private static final long serialVersionUID = -140552461;

    /**
     * The reference instance of <code>reportcard.fault_context</code>
     */
    public static final FaultContextTable FAULT_CONTEXT = new FaultContextTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FaultContextRecord> getRecordType() {
        return FaultContextRecord.class;
    }

    /**
     * The column <code>reportcard.fault_context.fault_context_id</code>.
     */
    public final TableField<FaultContextRecord, Byte> FAULT_CONTEXT_ID = createField(DSL.name("fault_context_id"), SQLDataType.TINYINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.fault_context.fault_context_name</code>.
     */
    public final TableField<FaultContextRecord, String> FAULT_CONTEXT_NAME = createField(DSL.name("fault_context_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private FaultContextTable(Name alias, Table<FaultContextRecord> aliased) {
        this(alias, aliased, null);
    }

    private FaultContextTable(Name alias, Table<FaultContextRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.fault_context</code> table reference
     */
    public FaultContextTable(String alias) {
        this(DSL.name(alias), FAULT_CONTEXT);
    }

    /**
     * Create an aliased <code>reportcard.fault_context</code> table reference
     */
    public FaultContextTable(Name alias) {
        this(alias, FAULT_CONTEXT);
    }

    /**
     * Create a <code>reportcard.fault_context</code> table reference
     */
    public FaultContextTable() {
        this(DSL.name("fault_context"), null);
    }

    public <O extends Record> FaultContextTable(Table<O> child, ForeignKey<O, FaultContextRecord> key) {
        super(child, key, FAULT_CONTEXT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public Identity<FaultContextRecord, Byte> getIdentity() {
        return (Identity<FaultContextRecord, Byte>) super.getIdentity();
    }

    @Override
    public UniqueKey<FaultContextRecord> getPrimaryKey() {
        return Keys.KEY_FAULT_CONTEXT_PRIMARY;
    }

    @Override
    public FaultContextTable as(String alias) {
        return new FaultContextTable(DSL.name(alias), this);
    }

    @Override
    public FaultContextTable as(Name alias) {
        return new FaultContextTable(alias, this);
    }

    @Override
    public FaultContextTable as(Table<?> alias) {
        return new FaultContextTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FaultContextTable rename(String name) {
        return new FaultContextTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FaultContextTable rename(Name name) {
        return new FaultContextTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FaultContextTable rename(Table<?> name) {
        return new FaultContextTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Byte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Byte, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Byte, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
