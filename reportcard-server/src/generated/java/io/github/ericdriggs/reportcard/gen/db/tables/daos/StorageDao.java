/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.Storage;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StorageRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageDao extends DAOImpl<StorageRecord, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage, Long> {

    /**
     * Create a new StorageDao without any configuration
     */
    public StorageDao() {
        super(Storage.STORAGE, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage.class);
    }

    /**
     * Create a new StorageDao with an attached configuration
     */
    public StorageDao(Configuration configuration) {
        super(Storage.STORAGE, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage.class, configuration);
    }

    @Override
    public Long getId(io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage object) {
        return object.getStorageId();
    }

    /**
     * Fetch records that have <code>storage_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchRangeOfStorageId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Storage.STORAGE.STORAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_id IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchByStorageId(Long... values) {
        return fetch(Storage.STORAGE.STORAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>storage_id = value</code>
     */
    public io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage fetchOneByStorageId(Long value) {
        return fetchOne(Storage.STORAGE.STORAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>storage_id = value</code>
     */
    public Optional<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchOptionalByStorageId(Long value) {
        return fetchOptional(Storage.STORAGE.STORAGE_ID, value);
    }

    /**
     * Fetch records that have <code>stage_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchRangeOfStageFk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Storage.STORAGE.STAGE_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stage_fk IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchByStageFk(Long... values) {
        return fetch(Storage.STORAGE.STAGE_FK, values);
    }

    /**
     * Fetch records that have <code>path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchRangeOfPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>path IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchByPath(String... values) {
        return fetch(Storage.STORAGE.PATH, values);
    }

    /**
     * Fetch records that have <code>indexFile BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchRangeOfIndexfile(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.INDEXFILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>indexFile IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchByIndexfile(String... values) {
        return fetch(Storage.STORAGE.INDEXFILE, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Storage.STORAGE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Storage> fetchByType(String... values) {
        return fetch(Storage.STORAGE.TYPE, values);
    }
}
