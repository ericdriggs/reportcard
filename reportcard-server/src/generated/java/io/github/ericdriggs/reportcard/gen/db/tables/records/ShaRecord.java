/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.records;


import io.github.ericdriggs.reportcard.gen.db.tables.Sha;

import java.time.LocalDateTime;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShaRecord extends UpdatableRecordImpl<ShaRecord> implements Record4<Long, String, LocalDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>reportcard.sha.sha_id</code>.
     */
    public ShaRecord setShaId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.sha.sha_id</code>.
     */
    public Long getShaId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>reportcard.sha.sha</code>.
     */
    public ShaRecord setSha(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.sha.sha</code>.
     */
    public String getSha() {
        return (String) get(1);
    }

    /**
     * Setter for <code>reportcard.sha.sha_created</code>.
     */
    public ShaRecord setShaCreated(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.sha.sha_created</code>.
     */
    public LocalDateTime getShaCreated() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>reportcard.sha.repo_fk</code>.
     */
    public ShaRecord setRepoFk(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.sha.repo_fk</code>.
     */
    public Integer getRepoFk() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, String, LocalDateTime, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Sha.SHA.SHA_ID;
    }

    @Override
    public Field<String> field2() {
        return Sha.SHA.SHA_;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return Sha.SHA.SHA_CREATED;
    }

    @Override
    public Field<Integer> field4() {
        return Sha.SHA.REPO_FK;
    }

    @Override
    public Long component1() {
        return getShaId();
    }

    @Override
    public String component2() {
        return getSha();
    }

    @Override
    public LocalDateTime component3() {
        return getShaCreated();
    }

    @Override
    public Integer component4() {
        return getRepoFk();
    }

    @Override
    public Long value1() {
        return getShaId();
    }

    @Override
    public String value2() {
        return getSha();
    }

    @Override
    public LocalDateTime value3() {
        return getShaCreated();
    }

    @Override
    public Integer value4() {
        return getRepoFk();
    }

    @Override
    public ShaRecord value1(Long value) {
        setShaId(value);
        return this;
    }

    @Override
    public ShaRecord value2(String value) {
        setSha(value);
        return this;
    }

    @Override
    public ShaRecord value3(LocalDateTime value) {
        setShaCreated(value);
        return this;
    }

    @Override
    public ShaRecord value4(Integer value) {
        setRepoFk(value);
        return this;
    }

    @Override
    public ShaRecord values(Long value1, String value2, LocalDateTime value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ShaRecord
     */
    public ShaRecord() {
        super(Sha.SHA);
    }

    /**
     * Create a detached, initialised ShaRecord
     */
    public ShaRecord(Long shaId, String sha, LocalDateTime shaCreated, Integer repoFk) {
        super(Sha.SHA);

        setShaId(shaId);
        setSha(sha);
        setShaCreated(shaCreated);
        setRepoFk(repoFk);
    }
}
