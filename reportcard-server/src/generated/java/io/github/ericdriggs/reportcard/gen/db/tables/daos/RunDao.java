/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.RunTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.RunPojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.RunRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunDao extends DAOImpl<RunRecord, RunPojo, Long> {

    /**
     * Create a new RunDao without any configuration
     */
    public RunDao() {
        super(RunTable.RUN, RunPojo.class);
    }

    /**
     * Create a new RunDao with an attached configuration
     */
    public RunDao(Configuration configuration) {
        super(RunTable.RUN, RunPojo.class, configuration);
    }

    @Override
    public Long getId(RunPojo object) {
        return object.getRunId();
    }

    /**
     * Fetch records that have <code>run_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfRunIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RunTable.RUN.RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>run_id IN (values)</code>
     */
    public List<RunPojo> fetchByRunIdTable(Long... values) {
        return fetch(RunTable.RUN.RUN_ID, values);
    }

    /**
     * Fetch a unique record that has <code>run_id = value</code>
     */
    public RunPojo fetchOneByRunIdTable(Long value) {
        return fetchOne(RunTable.RUN.RUN_ID, value);
    }

    /**
     * Fetch a unique record that has <code>run_id = value</code>
     */
    public Optional<RunPojo> fetchOptionalByRunIdTable(Long value) {
        return fetchOptional(RunTable.RUN.RUN_ID, value);
    }

    /**
     * Fetch records that have <code>run_reference BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfRunReferenceTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(RunTable.RUN.RUN_REFERENCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>run_reference IN (values)</code>
     */
    public List<RunPojo> fetchByRunReferenceTable(String... values) {
        return fetch(RunTable.RUN.RUN_REFERENCE, values);
    }

    /**
     * Fetch records that have <code>job_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfJobFkTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RunTable.RUN.JOB_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>job_fk IN (values)</code>
     */
    public List<RunPojo> fetchByJobFkTable(Long... values) {
        return fetch(RunTable.RUN.JOB_FK, values);
    }

    /**
     * Fetch records that have <code>job_run_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfJobRunCountTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RunTable.RUN.JOB_RUN_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>job_run_count IN (values)</code>
     */
    public List<RunPojo> fetchByJobRunCountTable(Integer... values) {
        return fetch(RunTable.RUN.JOB_RUN_COUNT, values);
    }

    /**
     * Fetch records that have <code>sha BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfShaTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(RunTable.RUN.SHA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sha IN (values)</code>
     */
    public List<RunPojo> fetchByShaTable(String... values) {
        return fetch(RunTable.RUN.SHA, values);
    }

    /**
     * Fetch records that have <code>run_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfRunDateTable(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RunTable.RUN.RUN_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>run_date IN (values)</code>
     */
    public List<RunPojo> fetchByRunDateTable(LocalDateTime... values) {
        return fetch(RunTable.RUN.RUN_DATE, values);
    }

    /**
     * Fetch records that have <code>is_success BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RunPojo> fetchRangeOfIsSuccessTable(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(RunTable.RUN.IS_SUCCESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_success IN (values)</code>
     */
    public List<RunPojo> fetchByIsSuccessTable(Boolean... values) {
        return fetch(RunTable.RUN.IS_SUCCESS, values);
    }
}
