/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.OrgRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Org extends TableImpl<OrgRecord> {

    private static final long serialVersionUID = -1697042096;

    /**
     * The reference instance of <code>reportcard.org</code>
     */
    public static final Org ORG = new Org();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrgRecord> getRecordType() {
        return OrgRecord.class;
    }

    /**
     * The column <code>reportcard.org.org_id</code>.
     */
    public final TableField<OrgRecord, Integer> ORG_ID = createField(DSL.name("org_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.org.org_name</code>.
     */
    public final TableField<OrgRecord, String> ORG_NAME = createField(DSL.name("org_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("'", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>reportcard.org.company_fk</code>.
     */
    public final TableField<OrgRecord, Integer> COMPANY_FK = createField(DSL.name("company_fk"), SQLDataType.INTEGER.nullable(false), this, "");

    private Org(Name alias, Table<OrgRecord> aliased) {
        this(alias, aliased, null);
    }

    private Org(Name alias, Table<OrgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.org</code> table reference
     */
    public Org(String alias) {
        this(DSL.name(alias), ORG);
    }

    /**
     * Create an aliased <code>reportcard.org</code> table reference
     */
    public Org(Name alias) {
        this(alias, ORG);
    }

    /**
     * Create a <code>reportcard.org</code> table reference
     */
    public Org() {
        this(DSL.name("org"), null);
    }

    public <O extends Record> Org(Table<O> child, ForeignKey<O, OrgRecord> key) {
        super(child, key, ORG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORG_FK_COMPANY_ORG_IDX);
    }

    @Override
    public Identity<OrgRecord, Integer> getIdentity() {
        return (Identity<OrgRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrgRecord> getPrimaryKey() {
        return Keys.KEY_ORG_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrgRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORG_ORG_NAME_IDX);
    }

    @Override
    public List<ForeignKey<OrgRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_COMPANY_ORG);
    }

    private transient Company _company;

    /**
     * Get the implicit join path to the <code>reportcard.company</code> table.
     */
    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.FK_COMPANY_ORG);

        return _company;
    }

    @Override
    public Org as(String alias) {
        return new Org(DSL.name(alias), this);
    }

    @Override
    public Org as(Name alias) {
        return new Org(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Org rename(String name) {
        return new Org(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Org rename(Name name) {
        return new Org(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
