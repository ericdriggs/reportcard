/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.records;


import io.github.ericdriggs.reportcard.gen.db.tables.TestCaseTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestCasePojo;

import java.math.BigDecimal;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestCaseRecord extends UpdatableRecordImpl<TestCaseRecord> implements Record9<Long, Long, Byte, String, String, BigDecimal, String, String, String> {

    private static final long serialVersionUID = -1338317709;

    /**
     * Setter for <code>reportcard.test_case.test_case_id</code>.
     */
    public TestCaseRecord setTestCaseId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.test_case_id</code>.
     */
    public Long getTestCaseId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>reportcard.test_case.test_suite_fk</code>.
     */
    public TestCaseRecord setTestSuiteFk(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.test_suite_fk</code>.
     */
    public Long getTestSuiteFk() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>reportcard.test_case.test_status_fk</code>.
     */
    public TestCaseRecord setTestStatusFk(Byte value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.test_status_fk</code>.
     */
    public Byte getTestStatusFk() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>reportcard.test_case.name</code>.
     */
    public TestCaseRecord setName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.name</code>.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>reportcard.test_case.class_name</code>.
     */
    public TestCaseRecord setClassName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.class_name</code>.
     */
    public String getClassName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>reportcard.test_case.time</code>.
     */
    public TestCaseRecord setTime(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.time</code>.
     */
    public BigDecimal getTime() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>reportcard.test_case.system_out</code>.
     */
    public TestCaseRecord setSystemOut(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.system_out</code>.
     */
    public String getSystemOut() {
        return (String) get(6);
    }

    /**
     * Setter for <code>reportcard.test_case.system_err</code>.
     */
    public TestCaseRecord setSystemErr(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.system_err</code>.
     */
    public String getSystemErr() {
        return (String) get(7);
    }

    /**
     * Setter for <code>reportcard.test_case.assertions</code>.
     */
    public TestCaseRecord setAssertions(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>reportcard.test_case.assertions</code>.
     */
    public String getAssertions() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Byte, String, String, BigDecimal, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, Long, Byte, String, String, BigDecimal, String, String, String> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TestCaseTable.TEST_CASE.TEST_CASE_ID;
    }

    @Override
    public Field<Long> field2() {
        return TestCaseTable.TEST_CASE.TEST_SUITE_FK;
    }

    @Override
    public Field<Byte> field3() {
        return TestCaseTable.TEST_CASE.TEST_STATUS_FK;
    }

    @Override
    public Field<String> field4() {
        return TestCaseTable.TEST_CASE.NAME;
    }

    @Override
    public Field<String> field5() {
        return TestCaseTable.TEST_CASE.CLASS_NAME;
    }

    @Override
    public Field<BigDecimal> field6() {
        return TestCaseTable.TEST_CASE.TIME;
    }

    @Override
    public Field<String> field7() {
        return TestCaseTable.TEST_CASE.SYSTEM_OUT;
    }

    @Override
    public Field<String> field8() {
        return TestCaseTable.TEST_CASE.SYSTEM_ERR;
    }

    @Override
    public Field<String> field9() {
        return TestCaseTable.TEST_CASE.ASSERTIONS;
    }

    @Override
    public Long component1() {
        return getTestCaseId();
    }

    @Override
    public Long component2() {
        return getTestSuiteFk();
    }

    @Override
    public Byte component3() {
        return getTestStatusFk();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public String component5() {
        return getClassName();
    }

    @Override
    public BigDecimal component6() {
        return getTime();
    }

    @Override
    public String component7() {
        return getSystemOut();
    }

    @Override
    public String component8() {
        return getSystemErr();
    }

    @Override
    public String component9() {
        return getAssertions();
    }

    @Override
    public Long value1() {
        return getTestCaseId();
    }

    @Override
    public Long value2() {
        return getTestSuiteFk();
    }

    @Override
    public Byte value3() {
        return getTestStatusFk();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public String value5() {
        return getClassName();
    }

    @Override
    public BigDecimal value6() {
        return getTime();
    }

    @Override
    public String value7() {
        return getSystemOut();
    }

    @Override
    public String value8() {
        return getSystemErr();
    }

    @Override
    public String value9() {
        return getAssertions();
    }

    @Override
    public TestCaseRecord value1(Long value) {
        setTestCaseId(value);
        return this;
    }

    @Override
    public TestCaseRecord value2(Long value) {
        setTestSuiteFk(value);
        return this;
    }

    @Override
    public TestCaseRecord value3(Byte value) {
        setTestStatusFk(value);
        return this;
    }

    @Override
    public TestCaseRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public TestCaseRecord value5(String value) {
        setClassName(value);
        return this;
    }

    @Override
    public TestCaseRecord value6(BigDecimal value) {
        setTime(value);
        return this;
    }

    @Override
    public TestCaseRecord value7(String value) {
        setSystemOut(value);
        return this;
    }

    @Override
    public TestCaseRecord value8(String value) {
        setSystemErr(value);
        return this;
    }

    @Override
    public TestCaseRecord value9(String value) {
        setAssertions(value);
        return this;
    }

    @Override
    public TestCaseRecord values(Long value1, Long value2, Byte value3, String value4, String value5, BigDecimal value6, String value7, String value8, String value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestCaseRecord
     */
    public TestCaseRecord() {
        super(TestCaseTable.TEST_CASE);
    }

    /**
     * Create a detached, initialised TestCaseRecord
     */
    public TestCaseRecord(Long testCaseId, Long testSuiteFk, Byte testStatusFk, String name, String className, BigDecimal time, String systemOut, String systemErr, String assertions) {
        super(TestCaseTable.TEST_CASE);

        setTestCaseId(testCaseId);
        setTestSuiteFk(testSuiteFk);
        setTestStatusFk(testStatusFk);
        setName(name);
        setClassName(className);
        setTime(time);
        setSystemOut(systemOut);
        setSystemErr(systemErr);
        setAssertions(assertions);
    }

    /**
     * Create a detached, initialised TestCaseRecord
     */
    public TestCaseRecord(TestCasePojo value) {
        super(TestCaseTable.TEST_CASE);

        if (value != null) {
            setTestCaseId(value.getTestCaseId());
            setTestSuiteFk(value.getTestSuiteFk());
            setTestStatusFk(value.getTestStatusFk());
            setName(value.getName());
            setClassName(value.getClassName());
            setTime(value.getTime());
            setSystemOut(value.getSystemOut());
            setSystemErr(value.getSystemErr());
            setAssertions(value.getAssertions());
        }
    }
}
