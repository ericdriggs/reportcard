/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.StageTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.StagePojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StageRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StageDao extends DAOImpl<StageRecord, StagePojo, Long> {

    /**
     * Create a new StageDao without any configuration
     */
    public StageDao() {
        super(StageTable.STAGE, StagePojo.class);
    }

    /**
     * Create a new StageDao with an attached configuration
     */
    public StageDao(Configuration configuration) {
        super(StageTable.STAGE, StagePojo.class, configuration);
    }

    @Override
    public Long getId(StagePojo object) {
        return object.getStageId();
    }

    /**
     * Fetch records that have <code>stage_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<StagePojo> fetchRangeOfStageIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(StageTable.STAGE.STAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stage_id IN (values)</code>
     */
    public List<StagePojo> fetchByStageIdTable(Long... values) {
        return fetch(StageTable.STAGE.STAGE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>stage_id = value</code>
     */
    public StagePojo fetchOneByStageIdTable(Long value) {
        return fetchOne(StageTable.STAGE.STAGE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>stage_id = value</code>
     */
    public Optional<StagePojo> fetchOptionalByStageIdTable(Long value) {
        return fetchOptional(StageTable.STAGE.STAGE_ID, value);
    }

    /**
     * Fetch records that have <code>stage_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<StagePojo> fetchRangeOfStageNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(StageTable.STAGE.STAGE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stage_name IN (values)</code>
     */
    public List<StagePojo> fetchByStageNameTable(String... values) {
        return fetch(StageTable.STAGE.STAGE_NAME, values);
    }

    /**
     * Fetch records that have <code>run_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<StagePojo> fetchRangeOfRunFkTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(StageTable.STAGE.RUN_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>run_fk IN (values)</code>
     */
    public List<StagePojo> fetchByRunFkTable(Long... values) {
        return fetch(StageTable.STAGE.RUN_FK, values);
    }

    /**
     * Fetch records that have <code>test_result_json BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<StagePojo> fetchRangeOfTestResultJsonTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(StageTable.STAGE.TEST_RESULT_JSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_result_json IN (values)</code>
     */
    public List<StagePojo> fetchByTestResultJsonTable(String... values) {
        return fetch(StageTable.STAGE.TEST_RESULT_JSON, values);
    }
}
