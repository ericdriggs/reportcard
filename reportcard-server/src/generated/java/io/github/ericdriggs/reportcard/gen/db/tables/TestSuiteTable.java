/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestSuiteRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuiteTable extends TableImpl<TestSuiteRecord> {

    private static final long serialVersionUID = -1535446926;

    /**
     * The reference instance of <code>reportcard.test_suite</code>
     */
    public static final TestSuiteTable TEST_SUITE = new TestSuiteTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestSuiteRecord> getRecordType() {
        return TestSuiteRecord.class;
    }

    /**
     * The column <code>reportcard.test_suite.test_suite_id</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_SUITE_ID = createField(DSL.name("test_suite_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.test_suite.test_result_fk</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_RESULT_FK = createField(DSL.name("test_result_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.name</code>.
     */
    public final TableField<TestSuiteRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.tests</code>.
     */
    public final TableField<TestSuiteRecord, Integer> TESTS = createField(DSL.name("tests"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.skipped</code>.
     */
    public final TableField<TestSuiteRecord, Integer> SKIPPED = createField(DSL.name("skipped"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.error</code>.
     */
    public final TableField<TestSuiteRecord, Integer> ERROR = createField(DSL.name("error"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.failure</code>.
     */
    public final TableField<TestSuiteRecord, Integer> FAILURE = createField(DSL.name("failure"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.time</code>.
     */
    public final TableField<TestSuiteRecord, BigDecimal> TIME = createField(DSL.name("time"), SQLDataType.DECIMAL(9, 3).nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite.package_name</code>.
     */
    public final TableField<TestSuiteRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>reportcard.test_suite.group</code>.
     */
    public final TableField<TestSuiteRecord, String> GROUP = createField(DSL.name("group"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>reportcard.test_suite.properties</code>.
     */
    public final TableField<TestSuiteRecord, String> PROPERTIES = createField(DSL.name("properties"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>reportcard.test_suite.is_success</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> IS_SUCCESS = createField(DSL.name("is_success"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>reportcard.test_suite.has_skip</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> HAS_SKIP = createField(DSL.name("has_skip"), SQLDataType.BOOLEAN, this, "");

    private TestSuiteTable(Name alias, Table<TestSuiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestSuiteTable(Name alias, Table<TestSuiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.test_suite</code> table reference
     */
    public TestSuiteTable(String alias) {
        this(DSL.name(alias), TEST_SUITE);
    }

    /**
     * Create an aliased <code>reportcard.test_suite</code> table reference
     */
    public TestSuiteTable(Name alias) {
        this(alias, TEST_SUITE);
    }

    /**
     * Create a <code>reportcard.test_suite</code> table reference
     */
    public TestSuiteTable() {
        this(DSL.name("test_suite"), null);
    }

    public <O extends Record> TestSuiteTable(Table<O> child, ForeignKey<O, TestSuiteRecord> key) {
        super(child, key, TEST_SUITE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEST_SUITE_TEST_RESULT_FK_IDX);
    }

    @Override
    public Identity<TestSuiteRecord, Long> getIdentity() {
        return (Identity<TestSuiteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestSuiteRecord> getPrimaryKey() {
        return Keys.KEY_TEST_SUITE_PRIMARY;
    }

    @Override
    public List<ForeignKey<TestSuiteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_RESULT_FK);
    }

    private transient TestResultTable _testResult;

    /**
     * Get the implicit join path to the <code>reportcard.test_result</code>
     * table.
     */
    public TestResultTable testResult() {
        if (_testResult == null)
            _testResult = new TestResultTable(this, Keys.TEST_RESULT_FK);

        return _testResult;
    }

    @Override
    public TestSuiteTable as(String alias) {
        return new TestSuiteTable(DSL.name(alias), this);
    }

    @Override
    public TestSuiteTable as(Name alias) {
        return new TestSuiteTable(alias, this);
    }

    @Override
    public TestSuiteTable as(Table<?> alias) {
        return new TestSuiteTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuiteTable rename(String name) {
        return new TestSuiteTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuiteTable rename(Name name) {
        return new TestSuiteTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuiteTable rename(Table<?> name) {
        return new TestSuiteTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, Long, String, Integer, Integer, Integer, Integer, BigDecimal, String, String, String, Boolean, Boolean> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super BigDecimal, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
