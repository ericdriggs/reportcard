/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StageRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StageTable extends TableImpl<StageRecord> {

    private static final long serialVersionUID = -1465021383;

    /**
     * The reference instance of <code>reportcard.stage</code>
     */
    public static final StageTable STAGE = new StageTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StageRecord> getRecordType() {
        return StageRecord.class;
    }

    /**
     * The column <code>reportcard.stage.stage_id</code>.
     */
    public final TableField<StageRecord, Long> STAGE_ID = createField(DSL.name("stage_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.stage.stage_name</code>.
     */
    public final TableField<StageRecord, String> STAGE_NAME = createField(DSL.name("stage_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.stage.run_fk</code>.
     */
    public final TableField<StageRecord, Long> RUN_FK = createField(DSL.name("run_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.stage.test_result_json</code>.
     */
    public final TableField<StageRecord, String> TEST_RESULT_JSON = createField(DSL.name("test_result_json"), SQLDataType.VARCHAR, this, "");

    private StageTable(Name alias, Table<StageRecord> aliased) {
        this(alias, aliased, null);
    }

    private StageTable(Name alias, Table<StageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.stage</code> table reference
     */
    public StageTable(String alias) {
        this(DSL.name(alias), STAGE);
    }

    /**
     * Create an aliased <code>reportcard.stage</code> table reference
     */
    public StageTable(Name alias) {
        this(alias, STAGE);
    }

    /**
     * Create a <code>reportcard.stage</code> table reference
     */
    public StageTable() {
        this(DSL.name("stage"), null);
    }

    public <O extends Record> StageTable(Table<O> child, ForeignKey<O, StageRecord> key) {
        super(child, key, STAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STAGE_STAGE_RUN_FK_IDX);
    }

    @Override
    public Identity<StageRecord, Long> getIdentity() {
        return (Identity<StageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StageRecord> getPrimaryKey() {
        return Keys.KEY_STAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<StageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STAGE_STAGE_ID_UNIQUE, Keys.KEY_STAGE_UQ_RUN_STAGE_NAME);
    }

    @Override
    public List<ForeignKey<StageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STAGE_RUN_FK);
    }

    private transient RunTable _run;

    /**
     * Get the implicit join path to the <code>reportcard.run</code> table.
     */
    public RunTable run() {
        if (_run == null)
            _run = new RunTable(this, Keys.STAGE_RUN_FK);

        return _run;
    }

    @Override
    public StageTable as(String alias) {
        return new StageTable(DSL.name(alias), this);
    }

    @Override
    public StageTable as(Name alias) {
        return new StageTable(alias, this);
    }

    @Override
    public StageTable as(Table<?> alias) {
        return new StageTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StageTable rename(String name) {
        return new StageTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StageTable rename(Name name) {
        return new StageTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StageTable rename(Table<?> name) {
        return new StageTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Long, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
