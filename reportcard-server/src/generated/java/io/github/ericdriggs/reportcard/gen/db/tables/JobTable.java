/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.JobRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobTable extends TableImpl<JobRecord> {

    private static final long serialVersionUID = 935871350;

    /**
     * The reference instance of <code>reportcard.job</code>
     */
    public static final JobTable JOB = new JobTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>reportcard.job.job_id</code>.
     */
    public final TableField<JobRecord, Long> JOB_ID = createField(DSL.name("job_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.job.job_info</code>.
     */
    public final TableField<JobRecord, String> JOB_INFO = createField(DSL.name("job_info"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>reportcard.job.branch_fk</code>.
     */
    public final TableField<JobRecord, Integer> BRANCH_FK = createField(DSL.name("branch_fk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.job.job_info_str</code>.
     */
    public final TableField<JobRecord, String> JOB_INFO_STR = createField(DSL.name("job_info_str"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>reportcard.job.last_run</code>.
     */
    public final TableField<JobRecord, Instant> LAST_RUN = createField(DSL.name("last_run"), SQLDataType.INSTANT.defaultValue(DSL.inline("utc_timestamp()", SQLDataType.INSTANT)), this, "");

    private JobTable(Name alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobTable(Name alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.job</code> table reference
     */
    public JobTable(String alias) {
        this(DSL.name(alias), JOB);
    }

    /**
     * Create an aliased <code>reportcard.job</code> table reference
     */
    public JobTable(Name alias) {
        this(alias, JOB);
    }

    /**
     * Create a <code>reportcard.job</code> table reference
     */
    public JobTable() {
        this(DSL.name("job"), null);
    }

    public <O extends Record> JobTable(Table<O> child, ForeignKey<O, JobRecord> key) {
        super(child, key, JOB);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public Identity<JobRecord, Long> getIdentity() {
        return (Identity<JobRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.KEY_JOB_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_JOB_UQ_BRANCH_FK_JOB_INFO_STR);
    }

    @Override
    public List<ForeignKey<JobRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_JOB_BRANCH);
    }

    private transient BranchTable _branch;

    /**
     * Get the implicit join path to the <code>reportcard.branch</code> table.
     */
    public BranchTable branch() {
        if (_branch == null)
            _branch = new BranchTable(this, Keys.FK_JOB_BRANCH);

        return _branch;
    }

    @Override
    public JobTable as(String alias) {
        return new JobTable(DSL.name(alias), this);
    }

    @Override
    public JobTable as(Name alias) {
        return new JobTable(alias, this);
    }

    @Override
    public JobTable as(Table<?> alias) {
        return new JobTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobTable rename(String name) {
        return new JobTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobTable rename(Name name) {
        return new JobTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobTable rename(Table<?> name) {
        return new JobTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Integer, String, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Integer, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Integer, ? super String, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
