/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.TestSuiteTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuitePojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestSuiteRecord;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuiteDao extends DAOImpl<TestSuiteRecord, TestSuitePojo, Long> {

    /**
     * Create a new TestSuiteDao without any configuration
     */
    public TestSuiteDao() {
        super(TestSuiteTable.TEST_SUITE, TestSuitePojo.class);
    }

    /**
     * Create a new TestSuiteDao with an attached configuration
     */
    public TestSuiteDao(Configuration configuration) {
        super(TestSuiteTable.TEST_SUITE, TestSuitePojo.class, configuration);
    }

    @Override
    public Long getId(TestSuitePojo object) {
        return object.getTestSuiteId();
    }

    /**
     * Fetch records that have <code>test_suite_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfTestSuiteIdTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.TEST_SUITE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_suite_id IN (values)</code>
     */
    public List<TestSuitePojo> fetchByTestSuiteIdTable(Long... values) {
        return fetch(TestSuiteTable.TEST_SUITE.TEST_SUITE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>test_suite_id = value</code>
     */
    public TestSuitePojo fetchOneByTestSuiteIdTable(Long value) {
        return fetchOne(TestSuiteTable.TEST_SUITE.TEST_SUITE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>test_suite_id = value</code>
     */
    public Optional<TestSuitePojo> fetchOptionalByTestSuiteIdTable(Long value) {
        return fetchOptional(TestSuiteTable.TEST_SUITE.TEST_SUITE_ID, value);
    }

    /**
     * Fetch records that have <code>test_result_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfTestResultFkTable(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.TEST_RESULT_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_result_fk IN (values)</code>
     */
    public List<TestSuitePojo> fetchByTestResultFkTable(Long... values) {
        return fetch(TestSuiteTable.TEST_SUITE.TEST_RESULT_FK, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<TestSuitePojo> fetchByNameTable(String... values) {
        return fetch(TestSuiteTable.TEST_SUITE.NAME, values);
    }

    /**
     * Fetch records that have <code>tests BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfTestsTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.TESTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tests IN (values)</code>
     */
    public List<TestSuitePojo> fetchByTestsTable(Integer... values) {
        return fetch(TestSuiteTable.TEST_SUITE.TESTS, values);
    }

    /**
     * Fetch records that have <code>skipped BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfSkippedTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.SKIPPED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>skipped IN (values)</code>
     */
    public List<TestSuitePojo> fetchBySkippedTable(Integer... values) {
        return fetch(TestSuiteTable.TEST_SUITE.SKIPPED, values);
    }

    /**
     * Fetch records that have <code>error BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfErrorTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.ERROR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>error IN (values)</code>
     */
    public List<TestSuitePojo> fetchByErrorTable(Integer... values) {
        return fetch(TestSuiteTable.TEST_SUITE.ERROR, values);
    }

    /**
     * Fetch records that have <code>failure BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfFailureTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.FAILURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>failure IN (values)</code>
     */
    public List<TestSuitePojo> fetchByFailureTable(Integer... values) {
        return fetch(TestSuiteTable.TEST_SUITE.FAILURE, values);
    }

    /**
     * Fetch records that have <code>time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfTimeTable(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>time IN (values)</code>
     */
    public List<TestSuitePojo> fetchByTimeTable(BigDecimal... values) {
        return fetch(TestSuiteTable.TEST_SUITE.TIME, values);
    }

    /**
     * Fetch records that have <code>package_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfPackageNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.PACKAGE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>package_name IN (values)</code>
     */
    public List<TestSuitePojo> fetchByPackageNameTable(String... values) {
        return fetch(TestSuiteTable.TEST_SUITE.PACKAGE_NAME, values);
    }

    /**
     * Fetch records that have <code>group BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfGroupTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.GROUP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group IN (values)</code>
     */
    public List<TestSuitePojo> fetchByGroupTable(String... values) {
        return fetch(TestSuiteTable.TEST_SUITE.GROUP, values);
    }

    /**
     * Fetch records that have <code>properties BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfPropertiesTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.PROPERTIES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>properties IN (values)</code>
     */
    public List<TestSuitePojo> fetchByPropertiesTable(String... values) {
        return fetch(TestSuiteTable.TEST_SUITE.PROPERTIES, values);
    }

    /**
     * Fetch records that have <code>is_success BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfIsSuccessTable(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.IS_SUCCESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_success IN (values)</code>
     */
    public List<TestSuitePojo> fetchByIsSuccessTable(Boolean... values) {
        return fetch(TestSuiteTable.TEST_SUITE.IS_SUCCESS, values);
    }

    /**
     * Fetch records that have <code>has_skip BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<TestSuitePojo> fetchRangeOfHasSkipTable(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TestSuiteTable.TEST_SUITE.HAS_SKIP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>has_skip IN (values)</code>
     */
    public List<TestSuitePojo> fetchByHasSkipTable(Boolean... values) {
        return fetch(TestSuiteTable.TEST_SUITE.HAS_SKIP, values);
    }
}
