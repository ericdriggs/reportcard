/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestSuiteFaultRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuiteFault extends TableImpl<TestSuiteFaultRecord> {

    private static final long serialVersionUID = 1991629220;

    /**
     * The reference instance of <code>reportcard.test_suite_fault</code>
     */
    public static final TestSuiteFault TEST_SUITE_FAULT = new TestSuiteFault();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestSuiteFaultRecord> getRecordType() {
        return TestSuiteFaultRecord.class;
    }

    /**
     * The column <code>reportcard.test_suite_fault.test_suite_fault_id</code>.
     */
    public final TableField<TestSuiteFaultRecord, Long> TEST_SUITE_FAULT_ID = createField(DSL.name("test_suite_fault_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.test_suite_fault.test_suite_fk</code>.
     */
    public final TableField<TestSuiteFaultRecord, Long> TEST_SUITE_FK = createField(DSL.name("test_suite_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite_fault.fault_context_fk</code>.
     */
    public final TableField<TestSuiteFaultRecord, Byte> FAULT_CONTEXT_FK = createField(DSL.name("fault_context_fk"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite_fault.type</code>.
     */
    public final TableField<TestSuiteFaultRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>reportcard.test_suite_fault.message</code>.
     */
    public final TableField<TestSuiteFaultRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>reportcard.test_suite_fault.value</code>.
     */
    public final TableField<TestSuiteFaultRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private TestSuiteFault(Name alias, Table<TestSuiteFaultRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestSuiteFault(Name alias, Table<TestSuiteFaultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.test_suite_fault</code> table
     * reference
     */
    public TestSuiteFault(String alias) {
        this(DSL.name(alias), TEST_SUITE_FAULT);
    }

    /**
     * Create an aliased <code>reportcard.test_suite_fault</code> table
     * reference
     */
    public TestSuiteFault(Name alias) {
        this(alias, TEST_SUITE_FAULT);
    }

    /**
     * Create a <code>reportcard.test_suite_fault</code> table reference
     */
    public TestSuiteFault() {
        this(DSL.name("test_suite_fault"), null);
    }

    public <O extends Record> TestSuiteFault(Table<O> child, ForeignKey<O, TestSuiteFaultRecord> key) {
        super(child, key, TEST_SUITE_FAULT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEST_SUITE_FAULT_FAULT_CONTEXT_FK_IDX, Indexes.TEST_SUITE_FAULT_TEST_SUITE_FK_IDX);
    }

    @Override
    public Identity<TestSuiteFaultRecord, Long> getIdentity() {
        return (Identity<TestSuiteFaultRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestSuiteFaultRecord> getPrimaryKey() {
        return Keys.KEY_TEST_SUITE_FAULT_PRIMARY;
    }

    @Override
    public List<ForeignKey<TestSuiteFaultRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TEST_SUITE, Keys.FK_SUITE_FAULT_CONTEXT);
    }

    private transient TestSuite _testSuite;
    private transient FaultContext _faultContext;

    /**
     * Get the implicit join path to the <code>reportcard.test_suite</code>
     * table.
     */
    public TestSuite testSuite() {
        if (_testSuite == null)
            _testSuite = new TestSuite(this, Keys.FK_TEST_SUITE);

        return _testSuite;
    }

    /**
     * Get the implicit join path to the <code>reportcard.fault_context</code>
     * table.
     */
    public FaultContext faultContext() {
        if (_faultContext == null)
            _faultContext = new FaultContext(this, Keys.FK_SUITE_FAULT_CONTEXT);

        return _faultContext;
    }

    @Override
    public TestSuiteFault as(String alias) {
        return new TestSuiteFault(DSL.name(alias), this);
    }

    @Override
    public TestSuiteFault as(Name alias) {
        return new TestSuiteFault(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuiteFault rename(String name) {
        return new TestSuiteFault(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuiteFault rename(Name name) {
        return new TestSuiteFault(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Byte, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
