/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db;


import io.github.ericdriggs.reportcard.gen.db.tables.Branch;
import io.github.ericdriggs.reportcard.gen.db.tables.Company;
import io.github.ericdriggs.reportcard.gen.db.tables.Job;
import io.github.ericdriggs.reportcard.gen.db.tables.Org;
import io.github.ericdriggs.reportcard.gen.db.tables.Repo;
import io.github.ericdriggs.reportcard.gen.db.tables.Run;
import io.github.ericdriggs.reportcard.gen.db.tables.Stage;
import io.github.ericdriggs.reportcard.gen.db.tables.Storage;
import io.github.ericdriggs.reportcard.gen.db.tables.TestCase;
import io.github.ericdriggs.reportcard.gen.db.tables.TestResult;
import io.github.ericdriggs.reportcard.gen.db.tables.TestStatus;
import io.github.ericdriggs.reportcard.gen.db.tables.TestSuite;
import io.github.ericdriggs.reportcard.gen.db.tables.records.BranchRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.CompanyRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.JobRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.OrgRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.RepoRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.RunRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StageRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StorageRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestCaseRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestResultRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestStatusRecord;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestSuiteRecord;

import lombok.Generated;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * reportcard.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BranchRecord> KEY_BRANCH_PRIMARY = Internal.createUniqueKey(Branch.BRANCH, DSL.name("KEY_branch_PRIMARY"), new TableField[] { Branch.BRANCH.BRANCH_ID }, true);
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_COMPANY_NAME_IDX = Internal.createUniqueKey(Company.COMPANY, DSL.name("KEY_company_company_name_idx"), new TableField[] { Company.COMPANY.COMPANY_NAME }, true);
    public static final UniqueKey<CompanyRecord> KEY_COMPANY_PRIMARY = Internal.createUniqueKey(Company.COMPANY, DSL.name("KEY_company_PRIMARY"), new TableField[] { Company.COMPANY.COMPANY_ID }, true);
    public static final UniqueKey<JobRecord> KEY_JOB_PRIMARY = Internal.createUniqueKey(Job.JOB, DSL.name("KEY_job_PRIMARY"), new TableField[] { Job.JOB.JOB_ID }, true);
    public static final UniqueKey<JobRecord> KEY_JOB_UQ_BRANCH_FK_JOB_INFO_STR = Internal.createUniqueKey(Job.JOB, DSL.name("KEY_job_UQ_BRANCH_FK_JOB_INFO_STR"), new TableField[] { Job.JOB.JOB_INFO_STR, Job.JOB.BRANCH_FK }, true);
    public static final UniqueKey<OrgRecord> KEY_ORG_ORG_NAME_IDX = Internal.createUniqueKey(Org.ORG, DSL.name("KEY_org_org_name_idx"), new TableField[] { Org.ORG.ORG_NAME }, true);
    public static final UniqueKey<OrgRecord> KEY_ORG_PRIMARY = Internal.createUniqueKey(Org.ORG, DSL.name("KEY_org_PRIMARY"), new TableField[] { Org.ORG.ORG_ID }, true);
    public static final UniqueKey<RepoRecord> KEY_REPO_PRIMARY = Internal.createUniqueKey(Repo.REPO, DSL.name("KEY_repo_PRIMARY"), new TableField[] { Repo.REPO.REPO_ID }, true);
    public static final UniqueKey<RepoRecord> KEY_REPO_REPO_NAME_IDX = Internal.createUniqueKey(Repo.REPO, DSL.name("KEY_repo_repo_name_idx"), new TableField[] { Repo.REPO.ORG_FK, Repo.REPO.REPO_NAME }, true);
    public static final UniqueKey<RunRecord> KEY_RUN_PRIMARY = Internal.createUniqueKey(Run.RUN, DSL.name("KEY_run_PRIMARY"), new TableField[] { Run.RUN.RUN_ID }, true);
    public static final UniqueKey<RunRecord> KEY_RUN_RUN_ID_UNIQUE = Internal.createUniqueKey(Run.RUN, DSL.name("KEY_run_run_id_unique"), new TableField[] { Run.RUN.RUN_ID }, true);
    public static final UniqueKey<RunRecord> KEY_RUN_UQ_RUN_JOB_REFERENCE = Internal.createUniqueKey(Run.RUN, DSL.name("KEY_run_uq_run_job_reference"), new TableField[] { Run.RUN.JOB_FK, Run.RUN.RUN_REFERENCE }, true);
    public static final UniqueKey<StageRecord> KEY_STAGE_PRIMARY = Internal.createUniqueKey(Stage.STAGE, DSL.name("KEY_stage_PRIMARY"), new TableField[] { Stage.STAGE.STAGE_ID }, true);
    public static final UniqueKey<StageRecord> KEY_STAGE_STAGE_ID_UNIQUE = Internal.createUniqueKey(Stage.STAGE, DSL.name("KEY_stage_stage_id_unique"), new TableField[] { Stage.STAGE.STAGE_ID }, true);
    public static final UniqueKey<StageRecord> KEY_STAGE_UQ_RUN_STAGE_NAME = Internal.createUniqueKey(Stage.STAGE, DSL.name("KEY_stage_uq_run_stage_name"), new TableField[] { Stage.STAGE.STAGE_NAME, Stage.STAGE.RUN_FK }, true);
    public static final UniqueKey<StorageRecord> KEY_STORAGE_PRIMARY = Internal.createUniqueKey(Storage.STORAGE, DSL.name("KEY_storage_PRIMARY"), new TableField[] { Storage.STORAGE.STORAGE_ID }, true);
    public static final UniqueKey<TestCaseRecord> KEY_TEST_CASE_PRIMARY = Internal.createUniqueKey(TestCase.TEST_CASE, DSL.name("KEY_test_case_PRIMARY"), new TableField[] { TestCase.TEST_CASE.TEST_CASE_ID }, true);
    public static final UniqueKey<TestResultRecord> KEY_TEST_RESULT_PRIMARY = Internal.createUniqueKey(TestResult.TEST_RESULT, DSL.name("KEY_test_result_PRIMARY"), new TableField[] { TestResult.TEST_RESULT.TEST_RESULT_ID }, true);
    public static final UniqueKey<TestStatusRecord> KEY_TEST_STATUS_PRIMARY = Internal.createUniqueKey(TestStatus.TEST_STATUS, DSL.name("KEY_test_status_PRIMARY"), new TableField[] { TestStatus.TEST_STATUS.TEST_STATUS_ID }, true);
    public static final UniqueKey<TestSuiteRecord> KEY_TEST_SUITE_PRIMARY = Internal.createUniqueKey(TestSuite.TEST_SUITE, DSL.name("KEY_test_suite_PRIMARY"), new TableField[] { TestSuite.TEST_SUITE.TEST_SUITE_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BranchRecord, RepoRecord> BRANCH_REPO_FK = Internal.createForeignKey(Branch.BRANCH, DSL.name("branch_repo_fk"), new TableField[] { Branch.BRANCH.REPO_FK }, Keys.KEY_REPO_PRIMARY, new TableField[] { Repo.REPO.REPO_ID }, true);
    public static final ForeignKey<JobRecord, BranchRecord> FK_JOB_BRANCH = Internal.createForeignKey(Job.JOB, DSL.name("FK_JOB_BRANCH"), new TableField[] { Job.JOB.BRANCH_FK }, Keys.KEY_BRANCH_PRIMARY, new TableField[] { Branch.BRANCH.BRANCH_ID }, true);
    public static final ForeignKey<OrgRecord, CompanyRecord> FK_COMPANY_ORG = Internal.createForeignKey(Org.ORG, DSL.name("FK_COMPANY_ORG"), new TableField[] { Org.ORG.COMPANY_FK }, Keys.KEY_COMPANY_PRIMARY, new TableField[] { Company.COMPANY.COMPANY_ID }, true);
    public static final ForeignKey<RepoRecord, OrgRecord> REPO_ORG_FK = Internal.createForeignKey(Repo.REPO, DSL.name("repo_org_fk"), new TableField[] { Repo.REPO.ORG_FK }, Keys.KEY_ORG_PRIMARY, new TableField[] { Org.ORG.ORG_ID }, true);
    public static final ForeignKey<RunRecord, JobRecord> RUN_JOB_FK = Internal.createForeignKey(Run.RUN, DSL.name("run_job_fk"), new TableField[] { Run.RUN.JOB_FK }, Keys.KEY_JOB_PRIMARY, new TableField[] { Job.JOB.JOB_ID }, true);
    public static final ForeignKey<StageRecord, RunRecord> STAGE_RUN_FK = Internal.createForeignKey(Stage.STAGE, DSL.name("stage_run_fk"), new TableField[] { Stage.STAGE.RUN_FK }, Keys.KEY_RUN_PRIMARY, new TableField[] { Run.RUN.RUN_ID }, true);
    public static final ForeignKey<StorageRecord, StageRecord> STAGE_FK = Internal.createForeignKey(Storage.STORAGE, DSL.name("stage_fk"), new TableField[] { Storage.STORAGE.STAGE_FK }, Keys.KEY_STAGE_PRIMARY, new TableField[] { Stage.STAGE.STAGE_ID }, true);
    public static final ForeignKey<TestCaseRecord, TestStatusRecord> FK_TEST_CASE_TEST_STATUS = Internal.createForeignKey(TestCase.TEST_CASE, DSL.name("fk_test_case_test_status"), new TableField[] { TestCase.TEST_CASE.TEST_STATUS_FK }, Keys.KEY_TEST_STATUS_PRIMARY, new TableField[] { TestStatus.TEST_STATUS.TEST_STATUS_ID }, true);
    public static final ForeignKey<TestCaseRecord, TestSuiteRecord> FK_TEST_CASE_TEST_SUITE = Internal.createForeignKey(TestCase.TEST_CASE, DSL.name("fk_test_case_test_suite"), new TableField[] { TestCase.TEST_CASE.TEST_SUITE_FK }, Keys.KEY_TEST_SUITE_PRIMARY, new TableField[] { TestSuite.TEST_SUITE.TEST_SUITE_ID }, true);
    public static final ForeignKey<TestResultRecord, StageRecord> TEST_RESULT_STAGE_FK = Internal.createForeignKey(TestResult.TEST_RESULT, DSL.name("test_result_stage_fk"), new TableField[] { TestResult.TEST_RESULT.STAGE_FK }, Keys.KEY_STAGE_PRIMARY, new TableField[] { Stage.STAGE.STAGE_ID }, true);
    public static final ForeignKey<TestSuiteRecord, TestResultRecord> TEST_RESULT_FK = Internal.createForeignKey(TestSuite.TEST_SUITE, DSL.name("test_result_fk"), new TableField[] { TestSuite.TEST_SUITE.TEST_RESULT_FK }, Keys.KEY_TEST_RESULT_PRIMARY, new TableField[] { TestResult.TEST_RESULT.TEST_RESULT_ID }, true);
}
