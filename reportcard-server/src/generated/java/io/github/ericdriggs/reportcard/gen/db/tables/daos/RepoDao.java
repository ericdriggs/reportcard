/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.RepoTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.RepoPojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.RepoRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepoDao extends DAOImpl<RepoRecord, RepoPojo, Integer> {

    /**
     * Create a new RepoDao without any configuration
     */
    public RepoDao() {
        super(RepoTable.REPO, RepoPojo.class);
    }

    /**
     * Create a new RepoDao with an attached configuration
     */
    public RepoDao(Configuration configuration) {
        super(RepoTable.REPO, RepoPojo.class, configuration);
    }

    @Override
    public Integer getId(RepoPojo object) {
        return object.getRepoId();
    }

    /**
     * Fetch records that have <code>repo_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RepoPojo> fetchRangeOfRepoIdTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RepoTable.REPO.REPO_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>repo_id IN (values)</code>
     */
    public List<RepoPojo> fetchByRepoIdTable(Integer... values) {
        return fetch(RepoTable.REPO.REPO_ID, values);
    }

    /**
     * Fetch a unique record that has <code>repo_id = value</code>
     */
    public RepoPojo fetchOneByRepoIdTable(Integer value) {
        return fetchOne(RepoTable.REPO.REPO_ID, value);
    }

    /**
     * Fetch a unique record that has <code>repo_id = value</code>
     */
    public Optional<RepoPojo> fetchOptionalByRepoIdTable(Integer value) {
        return fetchOptional(RepoTable.REPO.REPO_ID, value);
    }

    /**
     * Fetch records that have <code>repo_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RepoPojo> fetchRangeOfRepoNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(RepoTable.REPO.REPO_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>repo_name IN (values)</code>
     */
    public List<RepoPojo> fetchByRepoNameTable(String... values) {
        return fetch(RepoTable.REPO.REPO_NAME, values);
    }

    /**
     * Fetch records that have <code>org_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RepoPojo> fetchRangeOfOrgFkTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RepoTable.REPO.ORG_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>org_fk IN (values)</code>
     */
    public List<RepoPojo> fetchByOrgFkTable(Integer... values) {
        return fetch(RepoTable.REPO.ORG_FK, values);
    }
}
