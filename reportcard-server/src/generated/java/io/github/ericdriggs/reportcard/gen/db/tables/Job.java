/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.JobRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = -23631319;

    /**
     * The reference instance of <code>reportcard.job</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>reportcard.job.job_id</code>.
     */
    public final TableField<JobRecord, Long> JOB_ID = createField(DSL.name("job_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.job.job_info</code>.
     */
    public final TableField<JobRecord, String> JOB_INFO = createField(DSL.name("job_info"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>reportcard.job.branch_fk</code>.
     */
    public final TableField<JobRecord, Integer> BRANCH_FK = createField(DSL.name("branch_fk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.job.job_info_str</code>.
     */
    public final TableField<JobRecord, String> JOB_INFO_STR = createField(DSL.name("job_info_str"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>reportcard.job.last_run</code>.
     */
    public final TableField<JobRecord, LocalDateTime> LAST_RUN = createField(DSL.name("last_run"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.inline("utc_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    private Job(Name alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private Job(Name alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.job</code> table reference
     */
    public Job(String alias) {
        this(DSL.name(alias), JOB);
    }

    /**
     * Create an aliased <code>reportcard.job</code> table reference
     */
    public Job(Name alias) {
        this(alias, JOB);
    }

    /**
     * Create a <code>reportcard.job</code> table reference
     */
    public Job() {
        this(DSL.name("job"), null);
    }

    public <O extends Record> Job(Table<O> child, ForeignKey<O, JobRecord> key) {
        super(child, key, JOB);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public Identity<JobRecord, Long> getIdentity() {
        return (Identity<JobRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.KEY_JOB_PRIMARY;
    }

    @Override
    public List<UniqueKey<JobRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecord>>asList(Keys.KEY_JOB_PRIMARY, Keys.KEY_JOB_UQ_BRANCH_FK_JOB_INFO_STR);
    }

    @Override
    public List<ForeignKey<JobRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JobRecord, ?>>asList(Keys.FK_JOB_BRANCH);
    }

    private transient Branch _branch;

    public Branch branch() {
        if (_branch == null)
            _branch = new Branch(this, Keys.FK_JOB_BRANCH);

        return _branch;
    }

    @Override
    public Job as(String alias) {
        return new Job(DSL.name(alias), this);
    }

    @Override
    public Job as(Name alias) {
        return new Job(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(String name) {
        return new Job(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(Name name) {
        return new Job(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Integer, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
