/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "javadoc" })
public class Stage extends TableImpl<StageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>reportcard.stage</code>
     */
    public static final Stage STAGE = new Stage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StageRecord> getRecordType() {
        return StageRecord.class;
    }

    /**
     * The column <code>reportcard.stage.stage_id</code>.
     */
    public final TableField<StageRecord, Long> STAGE_ID = createField(DSL.name("stage_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.stage.stage_name</code>.
     */
    public final TableField<StageRecord, String> STAGE_NAME = createField(DSL.name("stage_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.stage.execution_fk</code>.
     */
    public final TableField<StageRecord, Long> EXECUTION_FK = createField(DSL.name("execution_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    private Stage(Name alias, Table<StageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stage(Name alias, Table<StageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.stage</code> table reference
     */
    public Stage(String alias) {
        this(DSL.name(alias), STAGE);
    }

    /**
     * Create an aliased <code>reportcard.stage</code> table reference
     */
    public Stage(Name alias) {
        this(alias, STAGE);
    }

    /**
     * Create a <code>reportcard.stage</code> table reference
     */
    public Stage() {
        this(DSL.name("stage"), null);
    }

    public <O extends Record> Stage(Table<O> child, ForeignKey<O, StageRecord> key) {
        super(child, key, STAGE);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STAGE_STAGE_EXECUTION_FK_IDX);
    }

    @Override
    public Identity<StageRecord, Long> getIdentity() {
        return (Identity<StageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StageRecord> getPrimaryKey() {
        return Keys.KEY_STAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<StageRecord>> getKeys() {
        return Arrays.<UniqueKey<StageRecord>>asList(Keys.KEY_STAGE_PRIMARY, Keys.KEY_STAGE_STAGE_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<StageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StageRecord, ?>>asList(Keys.STAGE_EXECUTION_FK);
    }

    private transient Execution _execution;

    public Execution execution() {
        if (_execution == null)
            _execution = new Execution(this, Keys.STAGE_EXECUTION_FK);

        return _execution;
    }

    @Override
    public Stage as(String alias) {
        return new Stage(DSL.name(alias), this);
    }

    @Override
    public Stage as(Name alias) {
        return new Stage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(String name) {
        return new Stage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(Name name) {
        return new Stage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
