/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.CompanyRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyTable extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = -2121893261;

    /**
     * The reference instance of <code>reportcard.company</code>
     */
    public static final CompanyTable COMPANY = new CompanyTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>reportcard.company.company_id</code>.
     */
    public final TableField<CompanyRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.company.company_name</code>.
     */
    public final TableField<CompanyRecord, String> COMPANY_NAME = createField(DSL.name("company_name"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("'", SQLDataType.VARCHAR)), this, "");

    private CompanyTable(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyTable(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.company</code> table reference
     */
    public CompanyTable(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>reportcard.company</code> table reference
     */
    public CompanyTable(Name alias) {
        this(alias, COMPANY);
    }

    /**
     * Create a <code>reportcard.company</code> table reference
     */
    public CompanyTable() {
        this(DSL.name("company"), null);
    }

    public <O extends Record> CompanyTable(Table<O> child, ForeignKey<O, CompanyRecord> key) {
        super(child, key, COMPANY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public Identity<CompanyRecord, Integer> getIdentity() {
        return (Identity<CompanyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompanyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COMPANY_COMPANY_NAME_IDX);
    }

    @Override
    public CompanyTable as(String alias) {
        return new CompanyTable(DSL.name(alias), this);
    }

    @Override
    public CompanyTable as(Name alias) {
        return new CompanyTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTable rename(String name) {
        return new CompanyTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyTable rename(Name name) {
        return new CompanyTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
