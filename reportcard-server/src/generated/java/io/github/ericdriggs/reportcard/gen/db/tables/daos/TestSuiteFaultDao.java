/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.TestSuiteFault;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestSuiteFaultRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuiteFaultDao extends DAOImpl<TestSuiteFaultRecord, io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault, Long> {

    /**
     * Create a new TestSuiteFaultDao without any configuration
     */
    public TestSuiteFaultDao() {
        super(TestSuiteFault.TEST_SUITE_FAULT, io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault.class);
    }

    /**
     * Create a new TestSuiteFaultDao with an attached configuration
     */
    public TestSuiteFaultDao(Configuration configuration) {
        super(TestSuiteFault.TEST_SUITE_FAULT, io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault.class, configuration);
    }

    @Override
    public Long getId(io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault object) {
        return object.getTestSuiteFaultId();
    }

    /**
     * Fetch records that have <code>test_suite_fault_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfTestSuiteFaultId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FAULT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_suite_fault_id IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByTestSuiteFaultId(Long... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FAULT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>test_suite_fault_id = value</code>
     */
    public io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault fetchOneByTestSuiteFaultId(Long value) {
        return fetchOne(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FAULT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>test_suite_fault_id = value</code>
     */
    public Optional<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchOptionalByTestSuiteFaultId(Long value) {
        return fetchOptional(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FAULT_ID, value);
    }

    /**
     * Fetch records that have <code>test_suite_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfTestSuiteFk(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_suite_fk IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByTestSuiteFk(Long... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.TEST_SUITE_FK, values);
    }

    /**
     * Fetch records that have <code>fault_context_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfFaultContextFk(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.FAULT_CONTEXT_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fault_context_fk IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByFaultContextFk(Byte... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.FAULT_CONTEXT_FK, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByType(String... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.TYPE, values);
    }

    /**
     * Fetch records that have <code>message BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfMessage(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.MESSAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>message IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByMessage(String... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.MESSAGE, values);
    }

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchRangeOfValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteFault.TEST_SUITE_FAULT.VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.TestSuiteFault> fetchByValue(String... values) {
        return fetch(TestSuiteFault.TEST_SUITE_FAULT.VALUE, values);
    }
}
