/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StorageRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageTable extends TableImpl<StorageRecord> {

    private static final long serialVersionUID = -1757715484;

    /**
     * The reference instance of <code>reportcard.storage</code>
     */
    public static final StorageTable STORAGE = new StorageTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageRecord> getRecordType() {
        return StorageRecord.class;
    }

    /**
     * The column <code>reportcard.storage.storage_id</code>.
     */
    public final TableField<StorageRecord, Long> STORAGE_ID = createField(DSL.name("storage_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.storage.stage_fk</code>.
     */
    public final TableField<StorageRecord, Long> STAGE_FK = createField(DSL.name("stage_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.storage.label</code>.
     */
    public final TableField<StorageRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>reportcard.storage.prefix</code>.
     */
    public final TableField<StorageRecord, String> PREFIX = createField(DSL.name("prefix"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>reportcard.storage.index_file</code>.
     */
    public final TableField<StorageRecord, String> INDEX_FILE = createField(DSL.name("index_file"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>reportcard.storage.storage_type</code>.
     */
    public final TableField<StorageRecord, Integer> STORAGE_TYPE = createField(DSL.name("storage_type"), SQLDataType.INTEGER, this, "");

    private StorageTable(Name alias, Table<StorageRecord> aliased) {
        this(alias, aliased, null);
    }

    private StorageTable(Name alias, Table<StorageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.storage</code> table reference
     */
    public StorageTable(String alias) {
        this(DSL.name(alias), STORAGE);
    }

    /**
     * Create an aliased <code>reportcard.storage</code> table reference
     */
    public StorageTable(Name alias) {
        this(alias, STORAGE);
    }

    /**
     * Create a <code>reportcard.storage</code> table reference
     */
    public StorageTable() {
        this(DSL.name("storage"), null);
    }

    public <O extends Record> StorageTable(Table<O> child, ForeignKey<O, StorageRecord> key) {
        super(child, key, STORAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STORAGE_STAGE_FK_IDX, Indexes.STORAGE_STORAGE_TYPE_FK_IDX);
    }

    @Override
    public Identity<StorageRecord, Long> getIdentity() {
        return (Identity<StorageRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StorageRecord> getPrimaryKey() {
        return Keys.KEY_STORAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<StorageRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_STORAGE_UQ_STABLE_LABEL);
    }

    @Override
    public List<ForeignKey<StorageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STAGE_FK, Keys.STORAGE_TYPE_FK);
    }

    private transient StageTable _stage;
    private transient StorageTypeTable _storageType;

    /**
     * Get the implicit join path to the <code>reportcard.stage</code> table.
     */
    public StageTable stage() {
        if (_stage == null)
            _stage = new StageTable(this, Keys.STAGE_FK);

        return _stage;
    }

    /**
     * Get the implicit join path to the <code>reportcard.storage_type</code>
     * table.
     */
    public StorageTypeTable storageType() {
        if (_storageType == null)
            _storageType = new StorageTypeTable(this, Keys.STORAGE_TYPE_FK);

        return _storageType;
    }

    @Override
    public StorageTable as(String alias) {
        return new StorageTable(DSL.name(alias), this);
    }

    @Override
    public StorageTable as(Name alias) {
        return new StorageTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageTable rename(String name) {
        return new StorageTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageTable rename(Name name) {
        return new StorageTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
