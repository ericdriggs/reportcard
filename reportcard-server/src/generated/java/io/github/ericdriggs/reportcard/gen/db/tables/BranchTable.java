/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.BranchRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BranchTable extends TableImpl<BranchRecord> {

    private static final long serialVersionUID = 2129338343;

    /**
     * The reference instance of <code>reportcard.branch</code>
     */
    public static final BranchTable BRANCH = new BranchTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BranchRecord> getRecordType() {
        return BranchRecord.class;
    }

    /**
     * The column <code>reportcard.branch.branch_id</code>.
     */
    public final TableField<BranchRecord, Integer> BRANCH_ID = createField(DSL.name("branch_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.branch.branch_name</code>.
     */
    public final TableField<BranchRecord, String> BRANCH_NAME = createField(DSL.name("branch_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.branch.repo_fk</code>.
     */
    public final TableField<BranchRecord, Integer> REPO_FK = createField(DSL.name("repo_fk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.branch.last_run</code>.
     */
    public final TableField<BranchRecord, Instant> LAST_RUN = createField(DSL.name("last_run"), SQLDataType.INSTANT.defaultValue(DSL.inline("utc_timestamp()", SQLDataType.INSTANT)), this, "");

    private BranchTable(Name alias, Table<BranchRecord> aliased) {
        this(alias, aliased, null);
    }

    private BranchTable(Name alias, Table<BranchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.branch</code> table reference
     */
    public BranchTable(String alias) {
        this(DSL.name(alias), BRANCH);
    }

    /**
     * Create an aliased <code>reportcard.branch</code> table reference
     */
    public BranchTable(Name alias) {
        this(alias, BRANCH);
    }

    /**
     * Create a <code>reportcard.branch</code> table reference
     */
    public BranchTable() {
        this(DSL.name("branch"), null);
    }

    public <O extends Record> BranchTable(Table<O> child, ForeignKey<O, BranchRecord> key) {
        super(child, key, BRANCH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BRANCH_BRANCH_REPO_IDX);
    }

    @Override
    public Identity<BranchRecord, Integer> getIdentity() {
        return (Identity<BranchRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BranchRecord> getPrimaryKey() {
        return Keys.KEY_BRANCH_PRIMARY;
    }

    @Override
    public List<ForeignKey<BranchRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BRANCH_REPO_FK);
    }

    private transient RepoTable _repo;

    /**
     * Get the implicit join path to the <code>reportcard.repo</code> table.
     */
    public RepoTable repo() {
        if (_repo == null)
            _repo = new RepoTable(this, Keys.BRANCH_REPO_FK);

        return _repo;
    }

    @Override
    public BranchTable as(String alias) {
        return new BranchTable(DSL.name(alias), this);
    }

    @Override
    public BranchTable as(Name alias) {
        return new BranchTable(alias, this);
    }

    @Override
    public BranchTable as(Table<?> alias) {
        return new BranchTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BranchTable rename(String name) {
        return new BranchTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BranchTable rename(Name name) {
        return new BranchTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BranchTable rename(Table<?> name) {
        return new BranchTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Instant> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Instant, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Instant, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
