/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.OrgTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.OrgPojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.OrgRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrgDao extends DAOImpl<OrgRecord, OrgPojo, Integer> {

    /**
     * Create a new OrgDao without any configuration
     */
    public OrgDao() {
        super(OrgTable.ORG, OrgPojo.class);
    }

    /**
     * Create a new OrgDao with an attached configuration
     */
    public OrgDao(Configuration configuration) {
        super(OrgTable.ORG, OrgPojo.class, configuration);
    }

    @Override
    public Integer getId(OrgPojo object) {
        return object.getOrgId();
    }

    /**
     * Fetch records that have <code>org_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<OrgPojo> fetchRangeOfOrgIdTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(OrgTable.ORG.ORG_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>org_id IN (values)</code>
     */
    public List<OrgPojo> fetchByOrgIdTable(Integer... values) {
        return fetch(OrgTable.ORG.ORG_ID, values);
    }

    /**
     * Fetch a unique record that has <code>org_id = value</code>
     */
    public OrgPojo fetchOneByOrgIdTable(Integer value) {
        return fetchOne(OrgTable.ORG.ORG_ID, value);
    }

    /**
     * Fetch a unique record that has <code>org_id = value</code>
     */
    public Optional<OrgPojo> fetchOptionalByOrgIdTable(Integer value) {
        return fetchOptional(OrgTable.ORG.ORG_ID, value);
    }

    /**
     * Fetch records that have <code>org_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<OrgPojo> fetchRangeOfOrgNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(OrgTable.ORG.ORG_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>org_name IN (values)</code>
     */
    public List<OrgPojo> fetchByOrgNameTable(String... values) {
        return fetch(OrgTable.ORG.ORG_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>org_name = value</code>
     */
    public OrgPojo fetchOneByOrgNameTable(String value) {
        return fetchOne(OrgTable.ORG.ORG_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>org_name = value</code>
     */
    public Optional<OrgPojo> fetchOptionalByOrgNameTable(String value) {
        return fetchOptional(OrgTable.ORG.ORG_NAME, value);
    }

    /**
     * Fetch records that have <code>company_fk BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<OrgPojo> fetchRangeOfCompanyFkTable(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(OrgTable.ORG.COMPANY_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>company_fk IN (values)</code>
     */
    public List<OrgPojo> fetchByCompanyFkTable(Integer... values) {
        return fetch(OrgTable.ORG.COMPANY_FK, values);
    }
}
