/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestResultRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestResultTable extends TableImpl<TestResultRecord> {

    private static final long serialVersionUID = -1669822456;

    /**
     * The reference instance of <code>reportcard.test_result</code>
     */
    public static final TestResultTable TEST_RESULT = new TestResultTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestResultRecord> getRecordType() {
        return TestResultRecord.class;
    }

    /**
     * The column <code>reportcard.test_result.test_result_id</code>.
     */
    public final TableField<TestResultRecord, Long> TEST_RESULT_ID = createField(DSL.name("test_result_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.test_result.stage_fk</code>.
     */
    public final TableField<TestResultRecord, Long> STAGE_FK = createField(DSL.name("stage_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.tests</code>.
     */
    public final TableField<TestResultRecord, Integer> TESTS = createField(DSL.name("tests"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.skipped</code>.
     */
    public final TableField<TestResultRecord, Integer> SKIPPED = createField(DSL.name("skipped"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.error</code>.
     */
    public final TableField<TestResultRecord, Integer> ERROR = createField(DSL.name("error"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.failure</code>.
     */
    public final TableField<TestResultRecord, Integer> FAILURE = createField(DSL.name("failure"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.time</code>.
     */
    public final TableField<TestResultRecord, BigDecimal> TIME = createField(DSL.name("time"), SQLDataType.DECIMAL(9, 3).nullable(false), this, "");

    /**
     * The column <code>reportcard.test_result.test_result_created</code>.
     */
    public final TableField<TestResultRecord, LocalDateTime> TEST_RESULT_CREATED = createField(DSL.name("test_result_created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.inline("utc_timestamp()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>reportcard.test_result.external_links</code>.
     */
    public final TableField<TestResultRecord, String> EXTERNAL_LINKS = createField(DSL.name("external_links"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>reportcard.test_result.is_success</code>.
     */
    public final TableField<TestResultRecord, Boolean> IS_SUCCESS = createField(DSL.name("is_success"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>reportcard.test_result.has_skip</code>.
     */
    public final TableField<TestResultRecord, Boolean> HAS_SKIP = createField(DSL.name("has_skip"), SQLDataType.BOOLEAN, this, "");

    private TestResultTable(Name alias, Table<TestResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestResultTable(Name alias, Table<TestResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.test_result</code> table reference
     */
    public TestResultTable(String alias) {
        this(DSL.name(alias), TEST_RESULT);
    }

    /**
     * Create an aliased <code>reportcard.test_result</code> table reference
     */
    public TestResultTable(Name alias) {
        this(alias, TEST_RESULT);
    }

    /**
     * Create a <code>reportcard.test_result</code> table reference
     */
    public TestResultTable() {
        this(DSL.name("test_result"), null);
    }

    public <O extends Record> TestResultTable(Table<O> child, ForeignKey<O, TestResultRecord> key) {
        super(child, key, TEST_RESULT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEST_RESULT_TEST_RESULT_STAGE_FK_IDX);
    }

    @Override
    public Identity<TestResultRecord, Long> getIdentity() {
        return (Identity<TestResultRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestResultRecord> getPrimaryKey() {
        return Keys.KEY_TEST_RESULT_PRIMARY;
    }

    @Override
    public List<ForeignKey<TestResultRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_RESULT_STAGE_FK);
    }

    private transient StageTable _stage;

    /**
     * Get the implicit join path to the <code>reportcard.stage</code> table.
     */
    public StageTable stage() {
        if (_stage == null)
            _stage = new StageTable(this, Keys.TEST_RESULT_STAGE_FK);

        return _stage;
    }

    @Override
    public TestResultTable as(String alias) {
        return new TestResultTable(DSL.name(alias), this);
    }

    @Override
    public TestResultTable as(Name alias) {
        return new TestResultTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestResultTable rename(String name) {
        return new TestResultTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestResultTable rename(Name name) {
        return new TestResultTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, Integer, Integer, Integer, Integer, BigDecimal, LocalDateTime, String, Boolean, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
