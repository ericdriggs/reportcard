/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.StorageTypeTable;
import io.github.ericdriggs.reportcard.gen.db.tables.pojos.StorageTypePojo;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StorageTypeRecord;

import java.util.List;
import java.util.Optional;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageTypeDao extends DAOImpl<StorageTypeRecord, StorageTypePojo, Byte> {

    /**
     * Create a new StorageTypeDao without any configuration
     */
    public StorageTypeDao() {
        super(StorageTypeTable.STORAGE_TYPE, StorageTypePojo.class);
    }

    /**
     * Create a new StorageTypeDao with an attached configuration
     */
    public StorageTypeDao(Configuration configuration) {
        super(StorageTypeTable.STORAGE_TYPE, StorageTypePojo.class, configuration);
    }

    @Override
    public Byte getId(StorageTypePojo object) {
        return object.getStorageTypeId();
    }

    /**
     * Fetch records that have <code>storage_type_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<StorageTypePojo> fetchRangeOfStorageTypeIdTable(Byte lowerInclusive, Byte upperInclusive) {
        return fetchRange(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_type_id IN (values)</code>
     */
    public List<StorageTypePojo> fetchByStorageTypeIdTable(Byte... values) {
        return fetch(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_ID, values);
    }

    /**
     * Fetch a unique record that has <code>storage_type_id = value</code>
     */
    public StorageTypePojo fetchOneByStorageTypeIdTable(Byte value) {
        return fetchOne(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_ID, value);
    }

    /**
     * Fetch a unique record that has <code>storage_type_id = value</code>
     */
    public Optional<StorageTypePojo> fetchOptionalByStorageTypeIdTable(Byte value) {
        return fetchOptional(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_ID, value);
    }

    /**
     * Fetch records that have <code>storage_type_name BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<StorageTypePojo> fetchRangeOfStorageTypeNameTable(String lowerInclusive, String upperInclusive) {
        return fetchRange(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>storage_type_name IN (values)</code>
     */
    public List<StorageTypePojo> fetchByStorageTypeNameTable(String... values) {
        return fetch(StorageTypeTable.STORAGE_TYPE.STORAGE_TYPE_NAME, values);
    }
}
