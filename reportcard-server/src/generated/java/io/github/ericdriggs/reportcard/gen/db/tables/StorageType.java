/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.StorageTypeRecord;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageType extends TableImpl<StorageTypeRecord> {

    private static final long serialVersionUID = 780576870;

    /**
     * The reference instance of <code>reportcard.storage_type</code>
     */
    public static final StorageType STORAGE_TYPE = new StorageType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageTypeRecord> getRecordType() {
        return StorageTypeRecord.class;
    }

    /**
     * The column <code>reportcard.storage_type.storage_type_id</code>.
     */
    public final TableField<StorageTypeRecord, Byte> STORAGE_TYPE_ID = createField(DSL.name("storage_type_id"), SQLDataType.TINYINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.storage_type.storage_type_name</code>.
     */
    public final TableField<StorageTypeRecord, String> STORAGE_TYPE_NAME = createField(DSL.name("storage_type_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private StorageType(Name alias, Table<StorageTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private StorageType(Name alias, Table<StorageTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.storage_type</code> table reference
     */
    public StorageType(String alias) {
        this(DSL.name(alias), STORAGE_TYPE);
    }

    /**
     * Create an aliased <code>reportcard.storage_type</code> table reference
     */
    public StorageType(Name alias) {
        this(alias, STORAGE_TYPE);
    }

    /**
     * Create a <code>reportcard.storage_type</code> table reference
     */
    public StorageType() {
        this(DSL.name("storage_type"), null);
    }

    public <O extends Record> StorageType(Table<O> child, ForeignKey<O, StorageTypeRecord> key) {
        super(child, key, STORAGE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Reportcard.REPORTCARD;
    }

    @Override
    public Identity<StorageTypeRecord, Byte> getIdentity() {
        return (Identity<StorageTypeRecord, Byte>) super.getIdentity();
    }

    @Override
    public UniqueKey<StorageTypeRecord> getPrimaryKey() {
        return Keys.KEY_STORAGE_TYPE_PRIMARY;
    }

    @Override
    public StorageType as(String alias) {
        return new StorageType(DSL.name(alias), this);
    }

    @Override
    public StorageType as(Name alias) {
        return new StorageType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageType rename(String name) {
        return new StorageType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageType rename(Name name) {
        return new StorageType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Byte, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
