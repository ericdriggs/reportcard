/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.ExecutionRecord;

import java.util.Arrays;
import java.util.List;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Execution extends TableImpl<ExecutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>reportcard.execution</code>
     */
    public static final Execution EXECUTION = new Execution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExecutionRecord> getRecordType() {
        return ExecutionRecord.class;
    }

    /**
     * The column <code>reportcard.execution.execution_id</code>.
     */
    public final TableField<ExecutionRecord, Long> EXECUTION_ID = createField(DSL.name("execution_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.execution.execution_external_id</code>.
     */
    public final TableField<ExecutionRecord, String> EXECUTION_EXTERNAL_ID = createField(DSL.name("execution_external_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.execution.context_fk</code>.
     */
    public final TableField<ExecutionRecord, Long> CONTEXT_FK = createField(DSL.name("context_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    private Execution(Name alias, Table<ExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Execution(Name alias, Table<ExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.execution</code> table reference
     */
    public Execution(String alias) {
        this(DSL.name(alias), EXECUTION);
    }

    /**
     * Create an aliased <code>reportcard.execution</code> table reference
     */
    public Execution(Name alias) {
        this(alias, EXECUTION);
    }

    /**
     * Create a <code>reportcard.execution</code> table reference
     */
    public Execution() {
        this(DSL.name("execution"), null);
    }

    public <O extends Record> Execution(Table<O> child, ForeignKey<O, ExecutionRecord> key) {
        super(child, key, EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXECUTION_EXECUTION_CONTEXT_FK_IDX);
    }

    @Override
    public Identity<ExecutionRecord, Long> getIdentity() {
        return (Identity<ExecutionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExecutionRecord> getPrimaryKey() {
        return Keys.KEY_EXECUTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExecutionRecord>> getKeys() {
        return Arrays.<UniqueKey<ExecutionRecord>>asList(Keys.KEY_EXECUTION_PRIMARY, Keys.KEY_EXECUTION_EXECUTION_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<ExecutionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExecutionRecord, ?>>asList(Keys.EXECUTION_CONTEXT_FK);
    }

    private transient Context _context;

    public Context context() {
        if (_context == null)
            _context = new Context(this, Keys.EXECUTION_CONTEXT_FK);

        return _context;
    }

    @Override
    public Execution as(String alias) {
        return new Execution(DSL.name(alias), this);
    }

    @Override
    public Execution as(Name alias) {
        return new Execution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Execution rename(String name) {
        return new Execution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Execution rename(Name name) {
        return new Execution(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
