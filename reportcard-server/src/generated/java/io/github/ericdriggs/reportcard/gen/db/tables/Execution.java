/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.Reportcard;
import io.github.ericdriggs.reportcard.gen.db.tables.records.ExecutionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Execution extends TableImpl<ExecutionRecord> {

    private static final long serialVersionUID = 1469760164;

    /**
     * The reference instance of <code>reportcard.execution</code>
     */
    public static final Execution EXECUTION = new Execution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExecutionRecord> getRecordType() {
        return ExecutionRecord.class;
    }

    /**
     * The column <code>reportcard.execution.execution_id</code>.
     */
    public final TableField<ExecutionRecord, Long> EXECUTION_ID = createField(DSL.name("execution_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.execution.execution_reference</code>.
     */
    public final TableField<ExecutionRecord, String> EXECUTION_REFERENCE = createField(DSL.name("execution_reference"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.execution.job_fk</code>.
     */
    public final TableField<ExecutionRecord, Long> JOB_FK = createField(DSL.name("job_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.execution.job_execution_count</code>.
     */
    public final TableField<ExecutionRecord, Integer> JOB_EXECUTION_COUNT = createField(DSL.name("job_execution_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>reportcard.execution.sha</code>.
     */
    public final TableField<ExecutionRecord, String> SHA = createField(DSL.name("sha"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>reportcard.execution.created</code>.
     */
    public final TableField<ExecutionRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Execution(Name alias, Table<ExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Execution(Name alias, Table<ExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.execution</code> table reference
     */
    public Execution(String alias) {
        this(DSL.name(alias), EXECUTION);
    }

    /**
     * Create an aliased <code>reportcard.execution</code> table reference
     */
    public Execution(Name alias) {
        this(alias, EXECUTION);
    }

    /**
     * Create a <code>reportcard.execution</code> table reference
     */
    public Execution() {
        this(DSL.name("execution"), null);
    }

    public <O extends Record> Execution(Table<O> child, ForeignKey<O, ExecutionRecord> key) {
        super(child, key, EXECUTION);
    }

    @Override
    public Schema getSchema() {
        return Reportcard.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXECUTION_EXECUTION_JOB_FK_IDX, Indexes.EXECUTION_EXECUTION_JOB_SHA);
    }

    @Override
    public Identity<ExecutionRecord, Long> getIdentity() {
        return (Identity<ExecutionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExecutionRecord> getPrimaryKey() {
        return Keys.KEY_EXECUTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<ExecutionRecord>> getKeys() {
        return Arrays.<UniqueKey<ExecutionRecord>>asList(Keys.KEY_EXECUTION_PRIMARY, Keys.KEY_EXECUTION_EXECUTION_ID_UNIQUE, Keys.KEY_EXECUTION_UQ_EXECUTION_JOB_REFERENCE);
    }

    @Override
    public List<ForeignKey<ExecutionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExecutionRecord, ?>>asList(Keys.EXECUTION_CONTEXT_FK);
    }

    private transient Job _job;

    public Job job() {
        if (_job == null)
            _job = new Job(this, Keys.EXECUTION_CONTEXT_FK);

        return _job;
    }

    @Override
    public Execution as(String alias) {
        return new Execution(DSL.name(alias), this);
    }

    @Override
    public Execution as(Name alias) {
        return new Execution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Execution rename(String name) {
        return new Execution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Execution rename(Name name) {
        return new Execution(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Long, Integer, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
