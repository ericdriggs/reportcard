/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.TestCaseFaultRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestCaseFaultTable extends TableImpl<TestCaseFaultRecord> {

    private static final long serialVersionUID = 116256387;

    /**
     * The reference instance of <code>reportcard.test_case_fault</code>
     */
    public static final TestCaseFaultTable TEST_CASE_FAULT = new TestCaseFaultTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestCaseFaultRecord> getRecordType() {
        return TestCaseFaultRecord.class;
    }

    /**
     * The column <code>reportcard.test_case_fault.test_case_fault_id</code>.
     */
    public final TableField<TestCaseFaultRecord, Long> TEST_CASE_FAULT_ID = createField(DSL.name("test_case_fault_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.test_case_fault.test_case_fk</code>.
     */
    public final TableField<TestCaseFaultRecord, Long> TEST_CASE_FK = createField(DSL.name("test_case_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_case_fault.fault_context_fk</code>.
     */
    public final TableField<TestCaseFaultRecord, Byte> FAULT_CONTEXT_FK = createField(DSL.name("fault_context_fk"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.test_case_fault.type</code>.
     */
    public final TableField<TestCaseFaultRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>reportcard.test_case_fault.message</code>.
     */
    public final TableField<TestCaseFaultRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>reportcard.test_case_fault.value</code>.
     */
    public final TableField<TestCaseFaultRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB, this, "");

    private TestCaseFaultTable(Name alias, Table<TestCaseFaultRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestCaseFaultTable(Name alias, Table<TestCaseFaultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.test_case_fault</code> table reference
     */
    public TestCaseFaultTable(String alias) {
        this(DSL.name(alias), TEST_CASE_FAULT);
    }

    /**
     * Create an aliased <code>reportcard.test_case_fault</code> table reference
     */
    public TestCaseFaultTable(Name alias) {
        this(alias, TEST_CASE_FAULT);
    }

    /**
     * Create a <code>reportcard.test_case_fault</code> table reference
     */
    public TestCaseFaultTable() {
        this(DSL.name("test_case_fault"), null);
    }

    public <O extends Record> TestCaseFaultTable(Table<O> child, ForeignKey<O, TestCaseFaultRecord> key) {
        super(child, key, TEST_CASE_FAULT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TEST_CASE_FAULT_FAULT_CONTEXT_FK_IDX, Indexes.TEST_CASE_FAULT_TEST_CASE_FK_IDX);
    }

    @Override
    public Identity<TestCaseFaultRecord, Long> getIdentity() {
        return (Identity<TestCaseFaultRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestCaseFaultRecord> getPrimaryKey() {
        return Keys.KEY_TEST_CASE_FAULT_PRIMARY;
    }

    @Override
    public List<ForeignKey<TestCaseFaultRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TEST_CASE, Keys.FK_FAULT_CONTEXT);
    }

    private transient TestCaseTable _testCase;
    private transient FaultContextTable _faultContext;

    /**
     * Get the implicit join path to the <code>reportcard.test_case</code>
     * table.
     */
    public TestCaseTable testCase() {
        if (_testCase == null)
            _testCase = new TestCaseTable(this, Keys.FK_TEST_CASE);

        return _testCase;
    }

    /**
     * Get the implicit join path to the <code>reportcard.fault_context</code>
     * table.
     */
    public FaultContextTable faultContext() {
        if (_faultContext == null)
            _faultContext = new FaultContextTable(this, Keys.FK_FAULT_CONTEXT);

        return _faultContext;
    }

    @Override
    public TestCaseFaultTable as(String alias) {
        return new TestCaseFaultTable(DSL.name(alias), this);
    }

    @Override
    public TestCaseFaultTable as(Name alias) {
        return new TestCaseFaultTable(alias, this);
    }

    @Override
    public TestCaseFaultTable as(Table<?> alias) {
        return new TestCaseFaultTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCaseFaultTable rename(String name) {
        return new TestCaseFaultTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCaseFaultTable rename(Name name) {
        return new TestCaseFaultTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCaseFaultTable rename(Table<?> name) {
        return new TestCaseFaultTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Byte, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Byte, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Byte, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
