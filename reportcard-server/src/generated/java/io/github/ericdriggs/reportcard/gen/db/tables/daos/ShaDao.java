/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables.daos;


import io.github.ericdriggs.reportcard.gen.db.tables.Sha;
import io.github.ericdriggs.reportcard.gen.db.tables.records.ShaRecord;

import java.time.LocalDateTime;
import java.util.List;

import lombok.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShaDao extends DAOImpl<ShaRecord, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha, Long> {

    /**
     * Create a new ShaDao without any configuration
     */
    public ShaDao() {
        super(Sha.SHA, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha.class);
    }

    /**
     * Create a new ShaDao with an attached configuration
     */
    public ShaDao(Configuration configuration) {
        super(Sha.SHA, io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha.class, configuration);
    }

    @Override
    public Long getId(io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha object) {
        return object.getShaId();
    }

    /**
     * Fetch records that have <code>sha_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchRangeOfShaId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Sha.SHA.SHA_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sha_id IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchByShaId(Long... values) {
        return fetch(Sha.SHA.SHA_ID, values);
    }

    /**
     * Fetch a unique record that has <code>sha_id = value</code>
     */
    public io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha fetchOneByShaId(Long value) {
        return fetchOne(Sha.SHA.SHA_ID, value);
    }

    /**
     * Fetch records that have <code>sha BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchRangeOfSha(String lowerInclusive, String upperInclusive) {
        return fetchRange(Sha.SHA.SHA_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sha IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchBySha(String... values) {
        return fetch(Sha.SHA.SHA_, values);
    }

    /**
     * Fetch records that have <code>sha_created BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchRangeOfShaCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Sha.SHA.SHA_CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sha_created IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchByShaCreated(LocalDateTime... values) {
        return fetch(Sha.SHA.SHA_CREATED, values);
    }

    /**
     * Fetch records that have <code>repo_fk BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchRangeOfRepoFk(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Sha.SHA.REPO_FK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>repo_fk IN (values)</code>
     */
    public List<io.github.ericdriggs.reportcard.gen.db.tables.pojos.Sha> fetchByRepoFk(Integer... values) {
        return fetch(Sha.SHA.REPO_FK, values);
    }
}
