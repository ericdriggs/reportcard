/*
 * This file is generated by jOOQ.
 */
package io.github.ericdriggs.reportcard.gen.db.tables;


import io.github.ericdriggs.reportcard.gen.db.Indexes;
import io.github.ericdriggs.reportcard.gen.db.Keys;
import io.github.ericdriggs.reportcard.gen.db.ReportcardTable;
import io.github.ericdriggs.reportcard.gen.db.tables.records.RunRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import lombok.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunTable extends TableImpl<RunRecord> {

    private static final long serialVersionUID = -1703280094;

    /**
     * The reference instance of <code>reportcard.run</code>
     */
    public static final RunTable RUN = new RunTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RunRecord> getRecordType() {
        return RunRecord.class;
    }

    /**
     * The column <code>reportcard.run.run_id</code>.
     */
    public final TableField<RunRecord, Long> RUN_ID = createField(DSL.name("run_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>reportcard.run.run_reference</code>.
     */
    public final TableField<RunRecord, String> RUN_REFERENCE = createField(DSL.name("run_reference"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>reportcard.run.job_fk</code>.
     */
    public final TableField<RunRecord, Long> JOB_FK = createField(DSL.name("job_fk"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>reportcard.run.job_run_count</code>.
     */
    public final TableField<RunRecord, Integer> JOB_RUN_COUNT = createField(DSL.name("job_run_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>reportcard.run.sha</code>.
     */
    public final TableField<RunRecord, String> SHA = createField(DSL.name("sha"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>reportcard.run.run_date</code>.
     */
    public final TableField<RunRecord, Instant> RUN_DATE = createField(DSL.name("run_date"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.inline("utc_timestamp()", SQLDataType.INSTANT)), this, "");

    /**
     * The column <code>reportcard.run.is_success</code>.
     */
    public final TableField<RunRecord, Boolean> IS_SUCCESS = createField(DSL.name("is_success"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("1", SQLDataType.BOOLEAN)), this, "");

    private RunTable(Name alias, Table<RunRecord> aliased) {
        this(alias, aliased, null);
    }

    private RunTable(Name alias, Table<RunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>reportcard.run</code> table reference
     */
    public RunTable(String alias) {
        this(DSL.name(alias), RUN);
    }

    /**
     * Create an aliased <code>reportcard.run</code> table reference
     */
    public RunTable(Name alias) {
        this(alias, RUN);
    }

    /**
     * Create a <code>reportcard.run</code> table reference
     */
    public RunTable() {
        this(DSL.name("run"), null);
    }

    public <O extends Record> RunTable(Table<O> child, ForeignKey<O, RunRecord> key) {
        super(child, key, RUN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReportcardTable.REPORTCARD;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RUN_RUN_JOB_FK_IDX, Indexes.RUN_RUN_JOB_SHA);
    }

    @Override
    public Identity<RunRecord, Long> getIdentity() {
        return (Identity<RunRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RunRecord> getPrimaryKey() {
        return Keys.KEY_RUN_PRIMARY;
    }

    @Override
    public List<UniqueKey<RunRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_RUN_RUN_ID_UNIQUE, Keys.KEY_RUN_UQ_RUN_JOB_REFERENCE);
    }

    @Override
    public List<ForeignKey<RunRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RUN_JOB_FK);
    }

    private transient JobTable _job;

    /**
     * Get the implicit join path to the <code>reportcard.job</code> table.
     */
    public JobTable job() {
        if (_job == null)
            _job = new JobTable(this, Keys.RUN_JOB_FK);

        return _job;
    }

    @Override
    public RunTable as(String alias) {
        return new RunTable(DSL.name(alias), this);
    }

    @Override
    public RunTable as(Name alias) {
        return new RunTable(alias, this);
    }

    @Override
    public RunTable as(Table<?> alias) {
        return new RunTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RunTable rename(String name) {
        return new RunTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RunTable rename(Name name) {
        return new RunTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RunTable rename(Table<?> name) {
        return new RunTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, Integer, String, Instant, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super Instant, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super Instant, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
